{"version":3,"file":"dialog.min.js","sources":["../src/dialog.js"],"sourcesContent":["import DialogModal from 'block_ai_interface/dialog_modal';\nimport * as externalServices from 'block_ai_interface/webservices';\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\nimport * as helper from 'block_ai_interface/helper';\nimport * as manager from 'block_ai_interface/ai_manager';\n\n// Declare variables.\n// Modal.\nlet modal = {};\nlet modaltitle = '';\n\n// Current conversation.\nlet conversation = {\n    id: 0,\n    messages: [],\n};\n// All conversations.\nlet allConversations = [];\n// Userid.\nlet userid = 0;\n// Course context id.\nlet contextid = 0;\n// First load.\nlet firstLoad = true;\n// AI in process of answering.\nlet aiAtWork = false;\n\nexport const init = async(params) => {\n    userid = params.userid;\n    contextid = params.contextid;\n    modaltitle = params.title;\n\n    // Build modal.\n    modal = await DialogModal.create({\n        templateContext: {\n            title: modaltitle,\n            // history: history, // history dynamically added.\n        },\n    });\n\n    // Add class for styling when modal is displayed.\n    modal.getRoot().on('modal:shown', function(e) {\n        e.target.classList.add(\"ai_interface_modal\");\n    });\n\n    // Load conversations.\n    await getConversations();\n\n    // Attach listener to the ai button to call modal.\n    let button = document.getElementById(\"ai_interface_button\");\n    button.addEventListener('mousedown', function() {\n        showModal(params);\n    });\n};\n\n/**\n * Show ai_interface modal.\n */\nasync function showModal() {\n\n    // Show modal.\n    await modal.show();\n\n    // Add listener for input submission.\n    const textarea = document.getElementById('block_ai_interface-input-id');\n    addTextareaListener(textarea);\n    const button = document.getElementById('block_ai_interface-submit-id');\n    button.addEventListener(\"click\", (event) => {\n        clickSubmitButton(event);\n    });\n\n\n    if (firstLoad) {\n        // Show conversation.\n        // Todo - Evtl. noch firstload verschönern, spinner für header und content z.b.\n        showConversation();\n\n        // Add history to dropdownmenu.\n        addToHistory(allConversations);\n\n        // Add listeners for dropdownmenu.\n        const btnNewDialog = document.getElementById('block_ai_interface_new_dialog');\n        btnNewDialog.addEventListener('mousedown', () => {\n            newDialog();\n        });\n        const btnDeleteDialog = document.getElementById('block_ai_interface_delete_dialog');\n        btnDeleteDialog.addEventListener('click', () => {\n            deleteCurrentDialog();\n        });\n        firstLoad = false;\n    }\n\n    helper.focustextarea();\n}\n\n\n/**\n * Webservice Get all conversations.\n */\nconst getConversations = async() => {\n    console.log(\"allConversations called\");\n    try {\n        // Ist hier await nötig um in init auf den Button listener zu warten?\n        allConversations = await externalServices.getAllConversations(userid, contextid);\n    } catch (error) {\n        displayException(error);\n    }\n};\n\n/**\n * Function to set conversation.\n * @param {*} id\n */\nconst showConversation = (id = 0) => {\n    // Change conversation or get last conversation.\n    console.log(\"showConversation called\");\n    if (id !== 0) {\n        conversation = allConversations.find(x => x.id === id);\n    } else if (typeof allConversations[0] !== 'undefined') {\n        console.log(\"last item allconv\");\n        conversation = allConversations.at(0);\n    }\n    clearMessages();\n    showMessages();\n    setModalHeader();\n    helper.attachCopyListener();\n};\n// Make globally accessible since it is used to show history in dropdownmenuitem.mustache.\ndocument.showConversation = showConversation;\n\n\n/**\n * Send input to ai connector.\n * @param {*} question\n */\nconst enterQuestion = async(question) => {\n\n    // Deny changing dialogs until answer present?\n    if (question == '') {\n        aiAtWork = false;\n        return;\n    }\n\n    // Add to conversation, answer not yet available.\n    showMessage(question, 'self', false);\n\n    // For first message, add a system message.\n    if (conversation.messages.length === 0) {\n        conversation.messages.push({\n            'message': 'Answer in german',\n            'sender': 'system',\n        });\n    }\n\n    // Options, with conversation history.\n    const options = {\n        'component': 'block_ai_interface',\n        'contextid': contextid,\n        'conversationcontext': conversation.messages,\n    };\n\n    // For a new conversation, get an id.\n    if (conversation.id === 0) {\n        try {\n            let idresult = await externalServices.getNewConversationId(contextid);\n            conversation.id = idresult.id;\n        } catch (error) {\n            displayException(error);\n        }\n        options.forcenewitemid = true;\n    }\n    options.itemid = conversation.id;\n\n\n    // Send to local_ai_manager.\n    let requestresult = await manager.askLocalAiManager('chat', question, options);\n    // If code 409, conversationid is already taken, get new one.\n    while (requestresult.code == 409) {\n        // Todo test, sleep and falsify db entry so error is triggered and a new id is given.\n        try {\n            let idresult = await externalServices.getNewConversationId(contextid);\n            conversation.id = idresult.id;\n            options.itemid = conversation.id;\n        } catch (error) {\n            displayException(error);\n        }\n        // Retry with new id.\n        requestresult = await manager.askLocalAiManager('chat', question, options);\n    }\n\n    // Write back answer.\n    showReply(requestresult.result);\n\n    // Attach copy listener.\n    let copy = document.querySelector('.ai_interface_modal .awaitanswer .copy');\n    helper.copyToClipboard(copy);\n\n    // Save new question and answer.\n    saveConversationLocally(question, requestresult.result);\n\n    // Ai is done.\n    aiAtWork = false;\n};\n\n/**\n * Render reply.\n * @param {string} text\n */\nconst showReply = (text) => {\n    let field = document.querySelector('.ai_interface_modal .awaitanswer .text div');\n    field.replaceWith(text);\n};\n\nconst showMessages = () => {\n    console.log(\"showMessages called\");\n    conversation.messages.forEach((val) => {\n        showMessage(val.message, val.sender);\n    });\n};\n\n/**\n * Show answer from local_ai_manager.\n * @param {*} text\n * @param {*} sender User or Ai\n * @param {*} answer Is answer in history\n */\nconst showMessage = async(text, sender = '', answer = true) => {\n    // Skip if sender is system.\n    if (sender === 'system') {\n        return;\n    }\n    // Imitate bool for message.mustache logic {{#sender}}.\n    if (sender === 'ai') {\n        sender = '';\n    }\n    const templateData = {\n        \"sender\": sender,\n        \"content\": text,\n        \"answer\": answer,\n    };\n    // Call the function to load and render our template.\n    const {html, js} = await Templates.renderForPromise('block_ai_interface/message', templateData);\n    Templates.appendNodeContents('.block_ai_interface-output', html, js);\n\n    // Scroll the modal content to the bottom.\n    helper.scrollToBottom();\n};\n\n/**\n * Create new / Reset dialog.\n * @param {bool} deleted\n */\nconst newDialog = (deleted = false) => {\n    console.log(\"newDialog called\");\n    // Add current convo to history and local representation, if not already there.\n    if (allConversations.find(x => x.id === conversation.id) === undefined && !deleted) {\n        addToHistory([conversation]);\n        allConversations.push(conversation);\n    }\n    // Reset local conservation.\n    conversation = {\n        id: 0,\n        messages: [],\n    };\n    clearMessages();\n    setModalHeader(true);\n};\n\n/**\n * Delete /hide current dialog.\n */\nconst deleteCurrentDialog = async() => {\n    console.log(\"deleteCurrentDialog called\");\n    if (conversation.id !== 0) {\n        try {\n            const deleted = await externalServices.deleteConversation(contextid, userid, conversation.id);\n            if (deleted) {\n                removeFromHistory();\n                showConversation();\n                // newDialog(true);\n            }\n        } catch (error) {\n            displayException(error);\n        }\n    }\n};\n\n\n/**\n * Add conversations to history.\n * @param {*} convos Conversations\n */\nconst addToHistory = (convos) => {\n    convos.forEach(async(convo) => {\n        // Conditionally shorten menu title, skip system message.\n        let title = convo.messages[1].message;\n        if (convo.messages[1].message.length > 50) {\n            title = convo.messages[1].message.substring(0, 50);\n            title += ' ...';\n        }\n\n        // Add entry in menu.\n        const templateData = {\n            \"title\": title,\n            \"conversationid\": convo.id,\n        };\n\n        const {html, js} = await Templates.renderForPromise('block_ai_interface/dropdownmenuitem', templateData);\n        Templates.appendNodeContents('.block_ai_interface_action_menu .dropdown-menu', html, js);\n\n        // If we add only one item, it is a new item and not the first and should be on top of history.\n        if (convos.length === 1 && allConversations.length > 1) {\n            console.log(\"move item to top called\");\n            // Make sure elements are in place to be worked with.\n            const dropdown = document.querySelector('.block_ai_interface_action_menu .dropdown-menu');\n            // Select the last element.\n            const lastItem = dropdown.lastElementChild;\n            // Get the reference element for the third position.\n            const thirdChild = dropdown.children[2];\n            // Remove the last item from its current position.\n            dropdown.removeChild(lastItem);\n            // Insert the last item at the new position (before the third child).\n            dropdown.insertBefore(lastItem, thirdChild);\n        }\n    });\n\n    // If we have more than 9 items, add scrollbar to menu.\n    if (convos.length > 9) {\n        const dropdown = document.querySelector('.block_ai_interface_action_menu .dropdown-menu');\n        dropdown.classList.add(\"addscroll\");\n    }\n};\n\n/**\n * Remove currrent conversation from history.\n */\nconst removeFromHistory = () => {\n    if (conversation.id !== 0) {\n        // Remove from dropdown.\n        const element = document.querySelector('.block_ai_interface_action_menu [data-id=\"' + conversation.id + '\"]');\n        element.remove();\n        // Remove from allConversations array.\n        allConversations = allConversations.filter(obj => obj.id !== conversation.id);\n    }\n};\n\n/**\n * Webservice Save conversation.\n * @param {*} question\n * @param {*} reply\n */\nconst saveConversationLocally = (question, reply) => {\n    // Add to local representation.\n    let message = {'message': question, 'sender': 'user'};\n    conversation.messages.push(message);\n    message = {'message': reply, 'sender': 'ai'};\n    conversation.messages.push(message);\n};\n\n/**\n * Clear output div.\n */\nconst clearMessages = () => {\n    console.log(\"clearMessages called\");\n    const output = document.querySelector('.block_ai_interface-output');\n    output.innerHTML = '';\n};\n\n/**\n * Set modal header title.\n * @param {*} empty\n */\nconst setModalHeader = (empty = false) => {\n    let modalheader = document.querySelector('.ai_interface_modal .modal-title div');\n    if (modalheader !== null && (conversation.messages.length > 0 || empty)) {\n        let title = '';\n        if (!empty) {\n            title = ' - ' + conversation.messages[1].message;\n            if (conversation.messages[1].message.length > 50) {\n                title = ' - ' + conversation.messages[1].message.substring(0, 50);\n                title += ' ...';\n            }\n        }\n        modalheader.innerHTML = modaltitle + title;\n    }\n};\n\n/**\n * Attach event listener.\n * @param {*} textarea\n */\nconst addTextareaListener = (textarea) => {\n    textarea.addEventListener('keydown', textareaOnKeydown);\n};\n\n/**\n * Action for textarea submission.\n * @param {*} event\n */\nconst textareaOnKeydown = (event) => {\n    // TODO check for mobile devices.\n    if (event.key === 'Enter' && !aiAtWork && !event.shiftKey) {\n        aiAtWork = true;\n        enterQuestion(event.target.value);\n        event.preventDefault();\n        event.target.value = '';\n    }\n};\n\n/**\n * Submit form.\n */\nconst clickSubmitButton = () => {\n    // Var aiAtWork to make it impossible to submit multiple questions at once.\n    if (!aiAtWork) {\n        aiAtWork = true;\n        const textarea = document.getElementById('block_ai_interface-input-id');\n        enterQuestion(textarea.value);\n        textarea.value = '';\n    }\n};\n"],"names":["modal","modaltitle","conversation","id","messages","allConversations","userid","contextid","firstLoad","aiAtWork","async","params","title","DialogModal","create","templateContext","getRoot","on","e","target","classList","add","getConversations","document","getElementById","addEventListener","show","textarea","addTextareaListener","event","clickSubmitButton","showConversation","addToHistory","newDialog","deleteCurrentDialog","helper","focustextarea","showModal","console","log","externalServices","getAllConversations","error","find","x","at","clearMessages","showMessages","setModalHeader","attachCopyListener","enterQuestion","question","showMessage","length","push","options","idresult","getNewConversationId","forcenewitemid","itemid","requestresult","manager","askLocalAiManager","code","showReply","result","copy","querySelector","copyToClipboard","saveConversationLocally","text","replaceWith","forEach","val","message","sender","answer","templateData","html","js","Templates","renderForPromise","appendNodeContents","scrollToBottom","deleted","undefined","deleteConversation","removeFromHistory","convos","convo","substring","dropdown","lastItem","lastElementChild","thirdChild","children","removeChild","insertBefore","remove","filter","obj","reply","innerHTML","empty","modalheader","textareaOnKeydown","key","shiftKey","value","preventDefault"],"mappings":"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"}