{"version":3,"file":"dialog.min.js","sources":["../src/dialog.js"],"sourcesContent":["import DialogModal from 'block_ai_interface/dialog_modal';\nimport * as externalServices from 'block_ai_interface/webservices';\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport { getNewConversationId } from './webservices';\n\n// Declare variables.\n// Modal.\nlet modal = {};\nlet modaltitle = '';\n\n// Current conversation.\nlet conversation = {\n    id: 0,\n    messages: [],\n};\n// All conversations.\nlet allConversations = [];\n// Userid.\nlet userid = 0;\n// Course context id.\nlet contextid = 0;\n// First load.\nlet firstLoad = true;\n\nexport const init = async(params) => {\n    userid = params.userid;\n    contextid = params.contextid;\n    modaltitle = params.title;\n\n    // Build modal.\n    modal = await DialogModal.create({\n        templateContext: {\n            title: modaltitle,\n            // history: history, // history dynamically added.\n        },\n    });\n\n    // Add class for styling when modal is displayed.\n    modal.getRoot().on('modal:shown', function(e) {\n        e.target.classList.add(\"ai_interface_modal\");\n        e.target.scrollTo(0, e.target.scrollHeight);\n    });\n\n    // Attach listener to the ai button to call modal.\n    let button = document.getElementById(\"ai_interface_button\");\n    button.addEventListener('mousedown', function() {\n        showModal(params);\n    });\n\n    // Load conversations.\n    getConversations();\n};\n\n/**\n * Show ai_interface modal.\n */\nasync function showModal() {\n\n    // Show modal.\n    modal.show();\n\n    // Add listener for input submission.\n    const textarea = document.getElementById('block_ai_interface-input-id');\n    addTextareaListener(textarea);\n\n    console.log(firstLoad);\n    if (firstLoad) {\n        // Show conversation.\n        // Todo - firstload rewrite header, element is null.\n        showConversation();\n\n        // Add history to dropdownmenu.\n        addToHistory(allConversations);\n\n        // Add listeners for dropdownmenu.\n        const btnNewDialog = document.getElementById('block_ai_interface_new_dialog');\n        btnNewDialog.addEventListener('mousedown', () => {\n            newDialog();\n        });\n        firstLoad = false;\n    }\n\n    // Wait for the modal to show and set focus.\n    setTimeout(function() {\n        focustextarea();\n    }, 300);\n}\n\n/**\n * Send input to ai connector.\n * @param {*} question\n */\nconst enterQuestion = async(question) => {\n\n    // Remove listener, so another question cant be triggered.\n    const textarea = document.getElementById('block_ai_interface-input-id');\n    textarea.removeEventListener('keydown', textareaOnKeydown);\n\n    // Add to conversation.\n    showMessage(question, 'self', false);\n\n    // For first message, add a system message.\n    if (conversation.messages.length === 0) {\n        conversation.messages.push({\n            'message': 'Answer in german',\n            'sender': 'system',\n        });\n    }\n\n    // Options, with conversation history.\n    const options = {\n        'component': 'block_ai_interface',\n        'contextid': contextid,\n        'conversationcontext': conversation.messages,\n    };\n\n    // For a new conversation, get an id.\n    if (conversation.id === 0) {\n        try {\n            let idresult = await externalServices.getNewConversationId(contextid);\n            conversation.id = idresult.id;\n        } catch (error) {\n            displayException(error);\n        }\n        options.forcenewitemid = true;\n    }\n    options.itemid = conversation.id;\n\n\n    // Send to local_ai_manager.\n    let requestresult = await askLocalAiManager('chat', question, options);\n    // If code 409, conversationid is already taken, get new one.\n    while (requestresult.code == 409) {\n        // Todo test, sleep and falsify db entry so error is triggered and a new id is given.\n        try {\n            let idresult = await externalServices.getNewConversationId(contextid);\n            conversation.id = idresult.id;\n            options.itemid = conversation.id;\n        } catch (error) {\n            displayException(error);\n        }\n        // Retry with new id.\n        requestresult = await askLocalAiManager('chat', question, options);\n    }\n\n    if (requestresult.code != 200) {\n        // Requestresult errorhandling.\n        errorHandling();\n        return;\n    }\n\n    // Write back answer.\n    showReply(requestresult.result);\n\n    // Attach copy listener.\n    let copy = document.querySelector('.ai_interface_modal .awaitanswer .copy');\n    copyToClipboard(copy);\n\n    // Save new question and answer.\n    saveConversationLocally(question, requestresult.result);\n\n    // Readd textarea listener.\n    addTextareaListener(textarea);\n\n\n    // Scroll the modal content to the bottom.\n    setTimeout(() => {\n        let modalContent = document.querySelector('.ai_interface_modal .modal-body');\n        modalContent.scrollTop = modalContent.scrollHeight;\n    }, 100);\n};\n\n/**\n * Render reply.\n * @param {string} text\n */\nconst showReply = (text) => {\n    let field = document.querySelector('.ai_interface_modal .awaitanswer .text div');\n    field.replaceWith(text);\n};\n\n/**\n * Create new / Reset dialog.\n */\nconst newDialog = () => {\n    console.log(\"newDialog called\");\n    // Add current convo to history and local representation, if not already there.\n    console.log(allConversations.find(x => x.id === conversation.id));\n    if (allConversations.find(x => x.id === conversation.id) === 'undefined') {\n        addToHistory([conversation]);\n        allConversations.push(conversation);\n    }\n    // Reset local conservation.\n    conversation = {\n        id: 0,\n        messages: [],\n    };\n    clearMessages();\n    setModalHeader(true);\n};\n\n/**\n * Get the async answer from the local_ai_manager.\n *\n * @param {string} purpose\n * @param {string} prompt\n * @param {array} options\n * @returns {string}\n */\nconst askLocalAiManager = async(purpose, prompt, options = []) => {\n    let result;\n    try {\n        result = await makeRequest(purpose, prompt, JSON.stringify(options));\n    } catch (error) {\n        displayException(error);\n    }\n    return result;\n};\n\n/**\n * Show answer from local_ai_manager.\n * @param {*} text\n * @param {*} sender User or Ai\n * @param {*} answer Is answer in history\n */\nconst showMessage = (text, sender = '', answer = true) => {\n    // Skip if sender is system.\n    if (sender === 'system') {\n        return;\n    }\n    // Imitate bool for message.mustache logic {{#sender}}.\n    if (sender === 'ai') {\n        sender = '';\n    }\n    const templateData = {\n        \"sender\": sender,\n        \"content\": text,\n        \"answer\": answer,\n    };\n    // Call the function to load and render our template.\n    Templates.renderForPromise('block_ai_interface/message', templateData)\n        // It returns a promise that needs to be resoved.\n        .then(({html, js}) => {\n        // Append results.\n        Templates.appendNodeContents('.block_ai_interface-output', html, js);\n            return true;\n        })\n        // Deal with this exception.\n        .catch(ex => displayException(ex));\n};\n\n\nconst showMessages = () => {\n    console.log(\"showMessages called\");\n    conversation.messages.forEach((val) => {\n        showMessage(val.message, val.sender);\n    });\n\n    // Scroll to bottom, when changing conversations.\n    const modaldiv = document.querySelector('.ai_interface_modal');\n    if (modaldiv !== null) {\n        setTimeout(() => {\n            modaldiv.scrollTo(0, modaldiv.scrollHeight);\n        }, 5);\n    }\n};\n\n/**\n * Clear output div.\n */\nconst clearMessages = () => {\n    console.log(\"clearMessages called\");\n    const output = document.querySelector('.block_ai_interface-output');\n    output.innerHTML = '';\n};\n\n/**\n * Webservice Get all conversations.\n */\nconst getConversations = async() => {\n    console.log(\"allConversations called\");\n    try {\n        allConversations = await externalServices.getAllConversations(userid, contextid);\n    } catch (error) {\n        displayException(error);\n    }\n};\n\n/**\n * Add conversations to history.\n * @param {*} convos Conversations\n */\nconst addToHistory = (convos) => {\n    convos.forEach((convo) => {\n        // Conditionally shorten menu title, skip system message.\n        let title = convo.messages[1].message;\n        if (convo.messages[1].message.length > 50) {\n            title = convo.messages[1].message.substring(0, 50);\n            title += ' ...';\n        }\n        console.log(convo);\n        console.log(convo.id);\n\n        // Add entry in menu.\n        const templateData = {\n            \"title\": title,\n            \"conversationid\": convo.id,\n        };\n        Templates.renderForPromise('block_ai_interface/dropdownmenuitem', templateData)\n            // It returns a promise that needs to be resoved.\n            .then(({html, js}) => {\n                // Append results.\n                Templates.appendNodeContents('.block_ai_interface_action_menu .dropdown-menu', html, js);\n                return true;\n            })\n            // Deal with this exception.\n            .catch(ex => displayException(ex));\n    });\n};\n\n\n/**\n * Function to set conversation.\n * @param {*} id\n */\nconst showConversation = (id = 0) => {\n    // Change conversation or get last conversation.\n    console.log(\"showConversation called\");\n    console.log(typeof allConversations[0]);\n    if (id !== 0) {\n        conversation = allConversations.find(x => x.id === id);\n    } else if (typeof allConversations[0] !== 'undefined') {\n        console.log(\"last item allconv\");\n        conversation = allConversations.at(0);\n    }\n    clearMessages();\n    showMessages();\n    // Wait till elements can be interacted with.\n    setTimeout(() => {\n        setModalHeader();\n        attachCopyListener();\n    }, 235);\n};\n// Make globally accessible since it is used to show history in dropdownmenuitem.mustache.\ndocument.showConversation = showConversation;\n\n/**\n * Webservice Save conversation.\n * @param {*} question\n * @param {*} reply\n */\nconst saveConversationLocally = (question, reply) => {\n    // Add to local representation.\n    let message = {'message': question, 'sender': 'user'};\n    conversation.messages.push(message);\n    message = {'message': reply, 'sender': 'ai'};\n    conversation.messages.push(message);\n};\n\n/**\n * Set modal header title.\n * @param {*} empty\n */\nconst setModalHeader = (empty = false) => {\n    let modalheader = document.querySelector('.ai_interface_modal .modal-title div');\n    if (modalheader !== null && (conversation.messages.length > 0 || empty)) {\n        let title = '';\n        if (!empty) {\n            title = ' - ' + conversation.messages[0].message;\n            if (conversation.messages[0].message.length > 50) {\n                title = ' - ' + conversation.messages[0].message.substring(0, 50);\n                title += ' ...';\n            }\n        }\n        modalheader.innerHTML = modaltitle + title;\n    }\n};\n\n/**\n * Focus textarea, also wait till element is visible.\n */\nconst focustextarea = () => {\n    let elapsed = 0;\n    const interval = 25;\n    const timeout = 2000;\n\n    const checkInterval = setInterval(() => {\n        // Check if the textarea exists.\n        const textarea = document.getElementById('block_ai_interface-input-id');\n        // textarea is a bad check, test with transition to be completed.\n        if (textarea) {\n            clearInterval(checkInterval);\n            // To set focus multiple times, focus has to be reset.\n            const rand = document.getElementsByTagName('input');\n            rand[0].focus();\n            textarea.focus();\n        }\n\n        // Increment elapsed time.\n        elapsed += interval;\n\n        // Check if the timeout has been reached.\n        if (elapsed >= timeout) {\n            clearInterval(checkInterval);\n        }\n    }, interval);\n};\n\n/**\n * Attach event listener.\n * @param {*} textarea\n */\nconst addTextareaListener = (textarea) => {\n    textarea.addEventListener('keydown', textareaOnKeydown);\n};\n\n/**\n * Action for textarea submission.\n * @param {*} event\n */\nconst textareaOnKeydown = (event) => {\n    // TODO check for mobile devices.\n    if (event.key === 'Enter') {\n        enterQuestion(event.target.value);\n        event.preventDefault();\n        event.target.value = '';\n    }\n};\n\n/**\n * Attach copy listener to all elements.\n */\nconst attachCopyListener = () => {\n    const elements = document.querySelectorAll(\".ai_interface_modal .copy\");\n    elements.forEach((element) => {\n        element.addEventListener('mousedown', function() {\n            copyToClipboard(element);\n        });\n    });\n}\n\n/**\n * Copy ai reply to clipboard.\n * @param {*} element\n */\nconst copyToClipboard = (element) => {\n\n    // Find the adjacent text container.\n    const textElement = element.nextElementSibling;\n\n    // Get the text content.\n    const textToCopy = textElement.innerText || textElement.textContent;\n\n    // Copy to clipboard using the Clipboard API.\n    navigator.clipboard.writeText(textToCopy);\n};\n\nconst errorHandling = (code) => {\n    // Replace spinner with error message.\n\n}"],"names":["modal","modaltitle","conversation","id","messages","allConversations","userid","contextid","firstLoad","async","params","title","DialogModal","create","templateContext","getRoot","on","e","target","classList","add","scrollTo","scrollHeight","document","getElementById","addEventListener","show","textarea","addTextareaListener","console","log","showConversation","addToHistory","newDialog","setTimeout","focustextarea","showModal","getConversations","showReply","text","querySelector","replaceWith","find","x","push","clearMessages","setModalHeader","askLocalAiManager","purpose","prompt","result","options","JSON","stringify","error","showMessage","sender","answer","templateData","renderForPromise","then","_ref","html","js","appendNodeContents","catch","ex","showMessages","forEach","val","message","modaldiv","innerHTML","externalServices","getAllConversations","convos","convo","length","substring","_ref2","at","attachCopyListener","saveConversationLocally","question","reply","empty","modalheader","elapsed","checkInterval","setInterval","clearInterval","getElementsByTagName","focus","textareaOnKeydown","event","key","removeEventListener","idresult","getNewConversationId","forcenewitemid","itemid","requestresult","code","errorHandling","copy","copyToClipboard","modalContent","scrollTop","enterQuestion","value","preventDefault","querySelectorAll","element","textElement","nextElementSibling","textToCopy","innerText","textContent","navigator","clipboard","writeText"],"mappings":"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"}