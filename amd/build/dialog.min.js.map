{"version":3,"file":"dialog.min.js","sources":["../src/dialog.js"],"sourcesContent":["import DialogModal from 'block_ai_chat/dialog_modal';\nimport * as externalServices from 'block_ai_chat/webservices';\nimport Templates from 'core/templates';\nimport {alert, exception as displayException} from 'core/notification';\nimport * as helper from 'block_ai_chat/helper';\nimport * as manager from 'block_ai_chat/ai_manager';\nimport {getString} from 'core/str';\nimport {marked} from 'block_ai_chat/vendor/marked.esm';\nimport {renderInfoBox} from 'local_ai_manager/render_infobox';\n\n// Declare variables.\n// Modal.\nlet modal = {};\nlet strHistory;\nlet strNewDialog;\nlet strToday;\nlet strYesterday;\nlet badge;\n\n// Current conversation.\nlet conversation = {\n    id: 0,\n    messages: [],\n};\n// All conversations.\nlet allConversations = [];\n// Userid.\nlet userid = 0;\n// Course context id.\nlet contextid = 0;\n// First load.\nlet firstLoad = true;\n// AI in process of answering.\nlet aiAtWork = false;\n// Maximum history included in query.\nlet maxHistory = 5;\n// Remember warnings for maximum history in this session.\nlet maxHistoryWarnings = new Set();\n\nexport const init = async(params) => {\n    userid = params.userid;\n    contextid = params.contextid;\n    strNewDialog = params.new;\n    strHistory = params.history;\n    badge = params.badge;\n\n    // Build modal.\n    modal = await DialogModal.create({\n        templateContext: {\n            title: strNewDialog,\n            badge: badge,\n            // history: history, // history dynamically added.\n        },\n    });\n\n    // Add class for styling when modal is displayed.\n    modal.getRoot().on('modal:shown', function(e) {\n        e.target.classList.add(\"ai_chat_modal\");\n    });\n\n    // Load conversations.\n    await getConversations();\n\n    // Get conversationcontext message limit.\n    let conversationcontextLimit = await externalServices.getConversationcontextLimit(contextid);\n    maxHistory = conversationcontextLimit.limit;\n\n    // Attach listener to the ai button to call modal.\n    let button = document.getElementById('ai_chat_button');\n    button.addEventListener('mousedown', async() => {\n        showModal(params);\n        await renderInfoBox('block_ai_chat', userid, '.ai_chat_modal_body [data-content=\"local_ai_manager_infobox\"]');\n    });\n\n    // Get strings.\n    strToday = await getString('today', 'core');\n    strYesterday = await getString('yesterday', 'block_ai_chat');\n};\n\n/**\n * Show ai_chat modal.\n */\nasync function showModal() {\n\n    // Show modal.\n    await modal.show();\n\n    // Add listener for input submission.\n    const textarea = document.getElementById('block_ai_chat-input-id');\n    addTextareaListener(textarea);\n    const button = document.getElementById('block_ai_chat-submit-id');\n    button.addEventListener(\"click\", (event) => {\n        clickSubmitButton(event);\n    });\n\n    if (firstLoad) {\n        // Show conversation.\n        // Todo - Evtl. noch firstload verschönern, spinner für header und content z.b.\n        showConversation();\n\n        // Add listeners for dropdownmenu.\n        const btnNewDialog = document.getElementById('block_ai_chat_new_dialog');\n        btnNewDialog.addEventListener('mousedown', () => {\n            newDialog();\n        });\n        const btnDeleteDialog = document.getElementById('block_ai_chat_delete_dialog');\n        btnDeleteDialog.addEventListener('click', () => {\n            deleteCurrentDialog();\n        });\n        const btnShowHistory = document.getElementById('block_ai_chat_show_history');\n        btnShowHistory.addEventListener('click', () => {\n            showHistory();\n        });\n        firstLoad = false;\n    }\n\n    helper.focustextarea();\n}\n\n\n/**\n * Webservice Get all conversations.\n */\nconst getConversations = async() => {\n    console.log(\"allConversations called\");\n    try {\n        // Ist hier await nötig um in init auf den Button listener zu warten?\n        allConversations = await externalServices.getAllConversations(userid, contextid);\n    } catch (error) {\n        displayException(error);\n    }\n};\n\n/**\n * Function to set conversation.\n * @param {*} id\n */\nconst showConversation = (id = 0) => {\n    console.log(\"showConversation called\");\n    // Dissallow changing conversations when question running.\n    if (aiAtWork) {\n        return;\n    }\n    // Change conversation or get last conversation.\n    if (id !== 0) {\n        // Set selected conversation.\n        conversation = allConversations.find(x => x.id === id);\n    } else if (typeof allConversations[0] !== 'undefined') {\n        // Set last conversation.\n        conversation = allConversations.at(0);\n    } else if (allConversations.length === 0) {\n        // Last conversation has been deleted.\n        newDialog(true);\n    }\n    clearMessages();\n    setModalHeader();\n    showMessages();\n};\n// Make globally accessible since it is used to show history in dropdownmenuitem.mustache.\ndocument.showConversation = showConversation;\n\n\n/**\n * Send input to ai connector.\n * @param {*} question\n */\nconst enterQuestion = async(question) => {\n\n    // Deny changing dialogs until answer present?\n    if (question == '') {\n        aiAtWork = false;\n        return;\n    }\n\n    // Add to conversation, answer not yet available.\n    showMessage(question, 'self', false);\n\n    // For first message, add a system message.\n    if (conversation.messages.length === 0) {\n        conversation.messages.push({\n            'message': 'Answer in german',\n            'sender': 'system',\n        });\n    }\n\n    // Ceck history for length limit.\n    const convHistory = await checkMessageHistoryLengthLimit(conversation.messages);\n\n    // Options, with conversation history.\n    const options = {\n        'component': 'block_ai_chat',\n        'contextid': contextid,\n        'conversationcontext': convHistory,\n    };\n\n    // For a new conversation, get an id.\n    if (conversation.id === 0) {\n        try {\n            let idresult = await externalServices.getNewConversationId(contextid);\n            conversation.id = idresult.id;\n        } catch (error) {\n            displayException(error);\n        }\n        options.forcenewitemid = true;\n    }\n\n    // Pass itemid / conversationid.\n    options.itemid = conversation.id;\n\n    // Send to local_ai_manager.\n    let requestresult = await manager.askLocalAiManager('chat', question, options);\n\n    // Handle errors.\n    if (requestresult.code != 200) {\n        requestresult = await errorHandling(requestresult, question, options);\n    }\n\n    // Write back answer.\n    showReply(requestresult.result);\n\n    // Ai is done.\n    aiAtWork = false;\n\n    // Attach copy listener.\n    let copy = document.querySelector('.ai_chat_modal .awaitanswer .copy');\n    copy.addEventListener('mousedown', () => {\n        helper.copyToClipboard(copy);\n    });\n\n    // Save new question and answer.\n    saveConversationLocally(question, requestresult.result);\n};\n\n/**\n * Render reply.\n * @param {string} text\n */\nconst showReply = async (text) => {\n    let field = document.querySelector('.ai_chat_modal .awaitanswer .text');\n    field.innerHTML = marked.parse(text);\n};\n\nconst showMessages = () => {\n    console.log(\"showMessages called\");\n    conversation.messages.forEach((val) => {\n        showMessage(val.message, val.sender);\n    });\n};\n\n/**\n * Show answer from local_ai_manager.\n * @param {*} text\n * @param {*} sender User or Ai\n * @param {*} answer Is answer in history\n */\nconst showMessage = async(text, sender = '', answer = true) => {\n    // Skip if sender is system.\n    if (sender === 'system') {\n        return;\n    }\n    // Imitate bool for message.mustache logic {{#sender}}.\n    if (sender === 'ai') {\n        sender = '';\n    }\n    const templateData = {\n        \"sender\": sender,\n        \"content\": marked.parse(text),\n        \"answer\": answer,\n    };\n    // Call the function to load and render our template.\n    const {html, js} = await Templates.renderForPromise('block_ai_chat/message', templateData);\n    Templates.appendNodeContents('.block_ai_chat-output', html, js);\n\n    // Add copy listener for replys.\n    if (sender === '') {\n        helper.attachCopyListenerLast();\n    }\n\n    // Scroll the modal content to the bottom.\n    helper.scrollToBottom();\n};\n\n/**\n * Create new / Reset dialog.\n * @param {bool} deleted\n */\nconst newDialog = (deleted = false) => {\n    console.log(\"newDialog called\");\n    if (aiAtWork) {\n        return;\n    }\n    // Add current convo local representation, if not already there.\n    if (allConversations.find(x => x.id === conversation.id) === undefined && !deleted) {\n        allConversations.push(conversation);\n    }\n    // Reset local conservation.\n    conversation = {\n        id: 0,\n        messages: [],\n    };\n    clearMessages();\n    setModalHeader(strNewDialog);\n};\n\n/**\n * Delete /hide current dialog.\n */\nconst deleteCurrentDialog = async() => {\n    console.log(\"deleteCurrentDialog called\");\n    if (conversation.id !== 0) {\n        try {\n            const deleted = await externalServices.deleteConversation(contextid, userid, conversation.id);\n            if (deleted) {\n                removeFromHistory();\n                showConversation();\n            }\n        } catch (error) {\n            displayException(error);\n        }\n    }\n};\n\n/**\n * Show conversation history.\n */\nconst showHistory = () => {\n    console.log(\"showHistory called\");\n    // Change title and add backlink.\n    let title = '<a href=\"#\" id=\"block_ai_chat_backlink\"><i class=\"icon fa fa-arrow-left\"></i>' + strHistory + '</a>';\n    clearMessages(true);\n    setModalHeader(title);\n    const btnBacklink = document.getElementById('block_ai_chat_backlink');\n    btnBacklink.addEventListener('click', () => {\n        showConversation(conversation.id);\n        clearMessages();\n        setModalHeader();\n    });\n\n    // Render history.\n    let tmpDateString = '';\n    allConversations.forEach(async(convo, key, arr) => {\n        if (typeof convo.messages[1] !== 'undefined') {\n            // Conditionally shorten menu title, skip system message.\n            let title = convo.messages[1].message;\n            if (convo.messages[1].message.length > 50) {\n                title = convo.messages[1].message.substring(0, 50);\n                title += ' ...';\n            }\n\n            // Get date and pass along if new.\n            const now = new Date();\n            const date = new Date(convo.timecreated * 1000);\n            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            const yesterday = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);\n            const twoWeeksAgo = new Date(now);\n            twoWeeksAgo.setDate(now.getDate() - 14);\n\n            const options = {weekday: 'long', day: '2-digit', month: '2-digit'};\n            const monthOptions = {month: 'long', year: '2-digit'};\n\n            let dateString = '';\n            if (date >= today) {\n                dateString = strToday;\n            } else if (date >= yesterday) {\n                dateString = strYesterday;\n            } else if (date >= twoWeeksAgo) {\n                dateString = date.toLocaleDateString(undefined, options);\n            } else {\n                dateString = date.toLocaleDateString(undefined, monthOptions);\n            }\n            if (dateString == tmpDateString) {\n                // Dont show date, if it hasnt changed.\n                dateString = '';\n            } else {\n                // Remember new latest date.\n                tmpDateString = dateString;\n            }\n\n            // Add entry in history.\n            const templateData = {\n                \"title\": title,\n                \"conversationid\": convo.id,\n                \"date\": dateString,\n            };\n\n            // Add new Dialog button for the last element.\n            if (Object.is(arr.length - 1, key)) {\n                templateData.last = true;\n            }\n\n            // Render history item.\n            const {html, js} = await Templates.renderForPromise('block_ai_chat/historyitem', templateData);\n            Templates.appendNodeContents('.ai_chat_modal .block_ai_chat-output', html, js);\n\n            // Add a listener for the new dialog button.\n            if (Object.is(arr.length - 1, key)) {\n                const btnNewDialog = document.getElementById('ai_chat_history_new_dialog');\n                btnNewDialog.addEventListener('mousedown', () => {\n                    newDialog();\n                });\n            }\n        }\n    });\n\n};\n\n/**\n * Remove currrent conversation from history.\n */\nconst removeFromHistory = () => {\n    // Cant remove if new or not yet in history.\n    if (conversation.id !== 0 && allConversations.find(x => x.id === conversation.id) !== undefined) {\n        // Remove from dropdown.\n        const element = document.querySelector('.block_ai_chat_action_menu [data-id=\"' + conversation.id + '\"]');\n        element.remove();\n        // Build new allConversations array without deleted one.\n        allConversations = allConversations.filter(obj => obj.id !== conversation.id);\n    }\n};\n\n/**\n * Webservice Save conversation.\n * @param {*} question\n * @param {*} reply\n */\nconst saveConversationLocally = (question, reply) => {\n    // Add to local representation.\n    let message = {'message': question, 'sender': 'user'};\n    conversation.messages.push(message);\n    message = {'message': reply, 'sender': 'ai'};\n    conversation.messages.push(message);\n};\n\n/**\n * Clear output div.\n */\nconst clearMessages = (hideinput = false) => {\n    console.log(\"clearMessages called\");\n    const output = document.querySelector('.block_ai_chat-output');\n    output.innerHTML = '';\n    // For showing history.\n    let input = document.querySelector('.block_ai_chat-input');\n    if (hideinput) {\n        input.style.display = 'none';\n    } else {\n        input.style.display = 'flex';\n    }\n};\n\n/**\n * Set modal header title.\n * @param {*} title\n */\nconst setModalHeader = (setTitle = '') => {\n    let modalheader = document.querySelector('.ai_chat_modal .modal-title div');\n    let title = '';\n    if (modalheader !== null && (conversation.messages.length > 0 || setTitle.length)) {\n        if (!setTitle.length) {\n            title = conversation.messages[1].message;\n            if (conversation.messages[1].message.length > 50) {\n                title = conversation.messages[1].message.substring(0, 50);\n                title += ' ...';\n            }\n        } else {\n            title = setTitle;\n        }\n        modalheader.innerHTML = title;\n    }\n};\n\n/**\n * Attach event listener.\n * @param {*} textarea\n */\nconst addTextareaListener = (textarea) => {\n    textarea.addEventListener('keydown', textareaOnKeydown);\n};\n\n/**\n * Action for textarea submission.\n * @param {*} event\n */\nconst textareaOnKeydown = (event) => {\n    // TODO check for mobile devices.\n    if (event.key === 'Enter' && !aiAtWork && !event.shiftKey) {\n        aiAtWork = true;\n        enterQuestion(event.target.value);\n        event.preventDefault();\n        event.target.value = '';\n    }\n};\n\n/**\n * Submit form.\n */\nconst clickSubmitButton = () => {\n    // Var aiAtWork to make it impossible to submit multiple questions at once.\n    if (!aiAtWork) {\n        aiAtWork = true;\n        const textarea = document.getElementById('block_ai_chat-input-id');\n        enterQuestion(textarea.value);\n        textarea.value = '';\n    }\n};\n\n/**\n * Handle error from local_ai_manager.\n * @param {*} requestresult\n * @param {*} question\n * @param {*} options\n * @returns {object}\n */\nconst errorHandling = async(requestresult, question, options) => {\n\n    // If code 409, conversationid is already taken, try get new a one.\n    if (requestresult.code == 409) {\n        while (requestresult.code == 409) {\n            try {\n                let idresult = await externalServices.getNewConversationId(contextid);\n                conversation.id = idresult.id;\n                options.itemid = conversation.id;\n            } catch (error) {\n                displayException(error);\n            }\n            // Retry with new id.\n            requestresult = await manager.askLocalAiManager('chat', question, options);\n            return requestresult;\n        }\n    }\n\n    // If any other errorcode, alert with errormessage.\n    const errorString = await getString('errorwithcode', 'block_ai_chat', requestresult.code);\n    await alert(errorString, requestresult.result);\n\n    // Change answer styling to differentiate from ai.\n    const answerdivs = document.querySelectorAll('.awaitanswer');\n    const answerdiv = answerdivs[answerdivs.length - 1];\n    const messagediv = answerdiv.closest('.message');\n    messagediv.classList.add('text-danger');\n    const senderdiv = messagediv.querySelector('.identity');\n    senderdiv.textContent = 'System';\n\n    // And write generic error message in chatbot.\n    requestresult.result = await getString('error', 'block_ai_chat');\n\n    return requestresult;\n};\n\n/**\n * Check historic messages for max length.\n * @param {array} messages\n * @returns {array}\n */\nconst checkMessageHistoryLengthLimit = async(messages) => {\n    const length = messages.length;\n    console.log(\"checkHistoryLengthLimit called\");\n    if (length > maxHistory) {\n        // Cut history.\n        let shortenedMessages = [messages[0], ...messages.slice(-maxHistory)];\n        console.log(shortenedMessages);\n\n        // Show warning once per session.\n        if (!maxHistoryWarnings.has(conversation.id)) {\n            const maxHistoryString = await getString('maxhistory', 'block_ai_chat', maxHistory);\n            const warningErrorString = await getString('maxhistoryreached', 'block_ai_chat', maxHistory);\n            await alert(maxHistoryString, warningErrorString);\n            // Remember warning.\n            maxHistoryWarnings.add(conversation.id);\n        }\n        return shortenedMessages;\n    }\n    // Limit not reached, return messages.\n    return messages;\n};\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireDefault","_dialog_modal","externalServices","_templates","helper","manager","strHistory","strNewDialog","strToday","strYesterday","badge","modal","conversation","id","messages","allConversations","userid","contextid","firstLoad","aiAtWork","maxHistory","maxHistoryWarnings","Set","_exports","init","async","params","new","history","DialogModal","create","templateContext","title","getRoot","on","e","target","classList","add","getConversations","conversationcontextLimit","getConversationcontextLimit","limit","document","getElementById","addEventListener","show","textarea","addTextareaListener","button","event","clickSubmitButton","showConversation","newDialog","deleteCurrentDialog","showHistory","focustextarea","showModal","renderInfoBox","getString","console","log","getAllConversations","error","displayException","arguments","length","undefined","find","x","at","clearMessages","setModalHeader","showMessages","enterQuestion","question","showMessage","push","message","sender","convHistory","checkMessageHistoryLengthLimit","options","component","conversationcontext","idresult","getNewConversationId","forcenewitemid","itemid","requestresult","askLocalAiManager","code","errorHandling","showReply","result","copy","querySelector","copyToClipboard","saveConversationLocally","innerHTML","marked","parse","text","forEach","val","answer","templateData","content","html","js","Templates","renderForPromise","appendNodeContents","attachCopyListenerLast","scrollToBottom","deleted","deleteConversation","removeFromHistory","tmpDateString","convo","arr","substring","now","Date","date","timecreated","today","getFullYear","getMonth","getDate","yesterday","twoWeeksAgo","setDate","weekday","day","month","monthOptions","year","dateString","toLocaleDateString","conversationid","is","last","remove","filter","reply","hideinput","input","style","display","setTitle","modalheader","textareaOnKeydown","shiftKey","value","preventDefault","errorString","alert","answerdivs","querySelectorAll","messagediv","closest","textContent","shortenedMessages","slice","maxHistoryString","warningErrorString"],"mappings":"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"}