{"version":3,"file":"dialog.min.js","sources":["../src/dialog.js"],"sourcesContent":["import DialogModal from 'block_ai_interface/dialog_modal';\nimport * as externalServices from 'block_ai_interface/webservices';\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\nimport {makeRequest} from 'local_ai_manager/make_request';\n\n// Declare variables.\n// Modal.\nlet modal = {};\nlet modaltitle = '';\n\n// Current conversation.\nlet conversation = {\n    id: 0,\n    messages: [],\n};\n// All conversations.\nlet allConversations = [];\n// Userid.\nlet userid = 0;\n// Course context id.\nlet contextid = 0;\n// First load.\nlet firstLoad = true;\n\nexport const init = async(params) => {\n    userid = params.userid;\n    contextid = params.contextid;\n    modaltitle = params.title;\n\n    // Build modal.\n    modal = await DialogModal.create({\n        templateContext: {\n            title: modaltitle,\n            // history: history, // history dynamically added.\n        },\n    });\n\n    // Add class for styling when modal is displayed.\n    modal.getRoot().on('modal:shown', function(e) {\n        e.target.classList.add(\"ai_interface_modal\");\n        e.target.scrollTo(0, e.target.scrollHeight);\n    });\n\n    // Attach listener to the ai button to call modal.\n    let button = document.getElementById(\"ai_interface_button\");\n    button.addEventListener('mousedown', function() {\n        showModal(params);\n    });\n\n    // Load conversations.\n    getConversations();\n\n    console.log(contextid);\n};\n\n/**\n * Show ai_interface modal.\n */\nasync function showModal() {\n\n    // Show modal.\n    modal.show();\n\n    // Add listener for input submission.\n    const textarea = document.getElementById('block_ai_interface-input-id');\n    addTextareaListener(textarea);\n\n    if (firstLoad) {\n        // Show conversation.\n        // Todo - firstload rewrite header, element is null.\n        showConversation();\n\n        // Add history to dropdownmenu.\n        addToHistory(allConversations);\n\n        // Add listeners for dropdownmenu.\n        const btnNewDialog = document.getElementById('block_ai_interface_new_dialog');\n        btnNewDialog.addEventListener('mousedown', () => {\n            newDialog();\n        });\n        firstLoad = false;\n    }\n\n    // Wait for the modal to show and set focus.\n    setTimeout(function() {\n        focustextarea();\n    }, 300);\n}\n\n/**\n * Send input to ai connector.\n * @param {*} question\n */\nconst enterQuestion = (question) => {\n\n    // Remove listener, so another question cant be triggered.\n    const textarea = document.getElementById('block_ai_interface-input-id');\n    textarea.removeEventListener('keydown', textareaOnKeydown);\n\n    // Add to conversation.\n    showMessage(question, 'self', false);\n\n    // Options, with conversation history.\n    const options = {\n        'component': 'block_ai_interface',\n        'contextid': contextid,\n        'messages': conversation,\n    };\n\n    // Send to local_ai_manager.\n    askLocalAiManager('chat', question, options).then(requestresult => {\n        if (requestresult.string == 'error') {\n            // Requestresult errorhandling.\n            return;\n        }\n\n        // Write back answer.\n        showReply(requestresult.result);\n\n        // Save new question and answer.\n        saveConversation(question, requestresult.result);\n\n        // Readd textarea listener.\n        addTextareaListener(textarea);\n\n        return;\n    }).catch((error) => displayException(error));\n};\n\n/**\n * Render reply.\n * @param {string} text\n */\nconst showReply = (text) => {\n    let field = document.querySelector('.ai_interface_modal .awaitanswer div');\n    field.replaceWith(text);\n};\n\n/**\n * Create new / Reset dialog.\n */\nconst newDialog = () => {\n    console.log(\"newDialog called\");\n    conversation = {\n        id: 0,\n        messages: [],\n    };\n    clearMessages();\n    setModalHeader(true);\n};\n\n/**\n * Get the async answer from the local_ai_manager.\n *\n * @param {string} purpose\n * @param {string} prompt\n * @param {array} options\n * @returns {string}\n */\nconst askLocalAiManager = async(purpose, prompt, options = []) => {\n    let result = await makeRequest(purpose, prompt, JSON.stringify(options));\n    console.log(result);\n    return result;\n};\n\n/**\n * Show answer from local_ai_manager.\n * @param {*} text\n * @param {*} sender User or Ai\n * @param {*} answer Is answer in history\n */\nconst showMessage = (text, sender = '', answer = true) => {\n    // Imitate bool for message.mustache logic {{#sender}}.\n    if (sender === 'ai') {\n        sender = '';\n    }\n    const templateData = {\n        \"sender\": sender,\n        \"content\": text,\n        \"answer\": answer,\n    };\n    // Call the function to load and render our template.\n    Templates.renderForPromise('block_ai_interface/message', templateData)\n    // It returns a promise that needs to be resoved.\n    .then(({html, js}) => {\n        // Append results.\n        Templates.appendNodeContents('.block_ai_interface-output', html, js);\n            return true;\n        })\n        // Deal with this exception.\n        .catch(ex => displayException(ex));\n};\n\nconst showMessages = () => {\n    console.log(\"showMessages called\");\n    conversation.messages.forEach((val) => {\n        showMessage(val.message, val.sender);\n    });\n\n    // Scroll to bottom, when changing conversations.\n    const modaldiv = document.querySelector('.ai_interface_modal');\n    if (modaldiv !== null) {\n        setTimeout(() => {\n            modaldiv.scrollTo(0, modaldiv.scrollHeight);\n        }, 5);\n    }\n};\n\nconst clearMessages = () => {\n    console.log(\"clearMessages called\");\n    const output = document.querySelector('.block_ai_interface-output');\n    output.innerHTML = '';\n};\n\n/**\n * WS Get all conversations.\n */\nconst getConversations = async() => {\n    allConversations = await externalServices.getAllConversations(userid, contextid);\n};\n\n/**\n * Add conversations to history.\n */\nconst addToHistory = (convos) => {\n    convos.forEach((convo) => {\n\n        // Conditionally shorten menu title.\n        let title = convo.messages[0].message;\n        if (convo.messages[0].message.length > 50) {\n            title = convo.messages[0].message.substring(0, 50);\n            title += ' ...';\n        }\n\n        // Add entry in menu.\n        const templateData = {\n            \"title\": title,\n            \"conversationid\": convo.id,\n        };\n        Templates.renderForPromise('block_ai_interface/dropdownmenuitem', templateData)\n            // It returns a promise that needs to be resoved.\n            .then(({html, js}) => {\n                // Append results.\n                Templates.appendNodeContents('.block_ai_interface_action_menu .dropdown-menu', html, js);\n                return true;\n            })\n            // Deal with this exception.\n            .catch(ex => displayException(ex));\n    });\n};\n\n\n/**\n * Function to set conversation.\n * @param {*} id\n */\nconst showConversation = (id = 0) => {\n    // Change conversation or get last conversation.\n    if (id !== 0) {\n        conversation = allConversations.find(x => x.id === id)\n    } else if (typeof allConversations[0] !== 'undefined') {\n        conversation = allConversations.at(-1);\n    }\n    clearMessages();\n    showMessages();\n    setModalHeader();\n};\n// Make globally accessible since it is used to show history in dropdownmenuitem.mustache.\ndocument.showConversation = showConversation;\n\n/**\n * Save conversation.\n * @param {*} question\n * @param {*} reply\n */\nconst saveConversation = async(question, reply) => {\n    await externalServices.saveInteraction(question, reply, conversation.id, userid, contextid);\n};\n\n/**\n * Set modal header title.\n * @param {*} empty\n */\nconst setModalHeader = (empty = false) => {\n    let modalheader = document.querySelector('.ai_interface_modal .modal-title div');\n    if (modalheader !== null) {\n        let title = '';\n        if (!empty) {\n            title = ' - ' + conversation.messages[0].message;\n            if (conversation.messages[0].message.length > 50) {\n                title = ' - ' + conversation.messages[0].message.substring(0, 50);\n                title += ' ...';\n            }\n        }\n        modalheader.innerHTML = modaltitle + title;\n    }\n};\n\n/**\n * Focus textarea, also wait till element is visible.\n */\nconst focustextarea = () => {\n    let elapsed = 0;\n    const interval = 25;\n    const timeout = 2000;\n\n    const checkInterval = setInterval(() => {\n        // Check if the textarea exists.\n        const textarea = document.getElementById('block_ai_interface-input-id');\n        // textarea is a bad check, test with transition to be completed.\n        if (textarea) {\n            clearInterval(checkInterval);\n            // To set focus multiple times, focus has to be reset.\n            const rand = document.getElementsByTagName('input');\n            rand[0].focus();\n            textarea.focus();\n        }\n\n        // Increment elapsed time.\n        elapsed += interval;\n\n        // Check if the timeout has been reached.\n        if (elapsed >= timeout) {\n            clearInterval(checkInterval);\n        }\n    }, interval);\n};\n\nconst addTextareaListener = (textarea) => {\n    textarea.addEventListener('keydown', textareaOnKeydown);\n};\n\nconst textareaOnKeydown = (event) => {\n    // TODO check for mobile devices.\n    if (event.key === 'Enter') {\n        enterQuestion(event.target.value);\n        event.preventDefault();\n        event.target.value = '';\n    }\n};\n"],"names":["modal","modaltitle","conversation","id","messages","allConversations","userid","contextid","firstLoad","async","params","title","DialogModal","create","templateContext","getRoot","on","e","target","classList","add","scrollTo","scrollHeight","document","getElementById","addEventListener","show","textarea","addTextareaListener","showConversation","addToHistory","newDialog","setTimeout","focustextarea","showModal","getConversations","console","log","showReply","text","querySelector","replaceWith","clearMessages","setModalHeader","askLocalAiManager","purpose","prompt","options","result","JSON","stringify","showMessage","sender","answer","templateData","renderForPromise","then","_ref","html","js","appendNodeContents","catch","ex","showMessages","forEach","val","message","modaldiv","innerHTML","externalServices","getAllConversations","convos","convo","length","substring","_ref2","find","x","at","saveConversation","question","reply","saveInteraction","empty","modalheader","elapsed","checkInterval","setInterval","clearInterval","getElementsByTagName","focus","textareaOnKeydown","event","key","removeEventListener","requestresult","string","error","enterQuestion","value","preventDefault"],"mappings":"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"}