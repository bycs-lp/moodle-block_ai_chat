{"version":3,"file":"dialog.min.js","sources":["../src/dialog.js"],"sourcesContent":["import Modal from 'core/modal';\nimport * as externalServices from 'block_ai_chat/webservices';\nimport Templates from 'core/templates';\nimport {alert, exception as displayException} from 'core/notification';\nimport ModalEvents from 'core/modal_events';\nimport * as helper from 'block_ai_chat/helper';\nimport * as manager from 'block_ai_chat/ai_manager';\nimport {getString} from 'core/str';\nimport {marked} from 'block_ai_chat/vendor/marked.esm';\nimport {renderInfoBox} from 'local_ai_manager/render_infobox';\nimport LocalStorage from 'core/localstorage';\n\n// Declare variables.\nconst VIEW_CHATWINDOW = 'block_ai_chat_chatwindow';\nconst VIEW_OPENFULL = 'block_ai_chat_openfull';\nconst VIEW_DOCKRIGHT = 'block_ai_chat_dockright';\nconst MODAL_OPEN = 'block_ai_chat_open';\n\n// Modal.\nlet modal = {};\nlet strHistory;\nlet strNewDialog;\nlet strToday;\nlet strYesterday;\nlet badge;\nlet viewmode;\nlet modalopen = false;\n\n// Current conversation.\nlet conversation = {\n    id: 0,\n    messages: [],\n};\n// All conversations.\nlet allConversations = [];\n// Userid.\nlet userid = 0;\n// Course context id.\nlet contextid = 0;\n// First load.\nlet firstLoad = true;\n// AI in process of answering.\nlet aiAtWork = false;\n// Maximum history included in query.\nlet maxHistory = 5;\n// Remember warnings for maximum history in this session.\nlet maxHistoryWarnings = new Set();\n\nclass DialogModal extends Modal {\n    static TYPE = \"block_ai_chat/dialog_modal\";\n    static TEMPLATE = \"block_ai_chat/dialog_modal\";\n\n    configure(modalConfig) {\n        // Show this modal on instantiation.\n        modalConfig.show = false;\n\n        // Remove from the DOM on close.\n        modalConfig.removeOnClose = false;\n\n        modalConfig.isVerticallyCentered = false;\n        // returnFocus: target,\n\n        super.configure(modalConfig);\n\n        // Accept our own custom arguments too.\n        if (modalConfig.titletest) {\n            this.setTitletest(modalConfig.titletest);\n        }\n    }\n\n    setTitletest(value) {\n        this.titletest = value;\n    }\n\n    hide() {\n        super.hide();\n        // Keep track of state, to restrict changes to block_ai_chat modal.\n        modalopen = false;\n        const body = document.querySelector('body');\n        body.classList.remove(MODAL_OPEN);\n    }\n}\n\nexport const init = async(params) => {\n    userid = params.userid;\n    contextid = params.contextid;\n    strNewDialog = params.new;\n    strHistory = params.history;\n    badge = params.badge;\n\n    // Build modal.\n    modal = await DialogModal.create({\n        templateContext: {\n            title: strNewDialog,\n            badge: badge,\n            // history: history, // history dynamically added.\n        },\n    });\n\n    // Add class for styling when modal is displayed.\n    modal.getRoot().on('modal:shown', function(e) {\n        e.target.classList.add(\"ai_chat_modal\");\n    });\n\n    // Conditionally prevent outside click event.\n    modal.getRoot().on(ModalEvents.outsideClick, event => {\n        checkOutsideClick(event);\n    });\n\n    // Load conversations.\n    await getConversations();\n\n    // Check and set viewmode.\n    setView();\n\n    // Get conversationcontext message limit.\n    let conversationcontextLimit = await externalServices.getConversationcontextLimit(contextid);\n    maxHistory = conversationcontextLimit.limit;\n\n    // Attach listener to the ai button to call modal.\n    let button = document.getElementById('ai_chat_button');\n    button.addEventListener('mousedown', async() => {\n        showModal(params);\n        await renderInfoBox('block_ai_chat', userid, '.ai_chat_modal_body [data-content=\"local_ai_manager_infobox\"]');\n    });\n\n    // Get strings.\n    strToday = await getString('today', 'core');\n    strYesterday = await getString('yesterday', 'block_ai_chat');\n};\n\n/**\n * Show ai_chat modal.\n */\nasync function showModal() {\n    // Switch for repeated clicking.\n    if (modalopen) {\n        modal.hide();\n        return;\n    }\n\n    // Show modal.\n    await modal.show();\n    modalopen = true;\n    const body = document.querySelector('body');\n    body.classList.add(MODAL_OPEN);\n\n    // Add listener for input submission.\n    const textarea = document.getElementById('block_ai_chat-input-id');\n    addTextareaListener(textarea);\n    const button = document.getElementById('block_ai_chat-submit-id');\n    button.addEventListener(\"click\", (event) => {\n        clickSubmitButton(event);\n    });\n\n    if (firstLoad) {\n        // Show conversation.\n        // Todo - Evtl. noch firstload verschönern, spinner für header und content z.b.\n        showConversation();\n\n        // Add listeners for dropdownmenus.\n        // Actions.\n        const btnNewDialog = document.getElementById('block_ai_chat_new_dialog');\n        btnNewDialog.addEventListener('mousedown', () => {\n            newDialog();\n        });\n        const btnDeleteDialog = document.getElementById('block_ai_chat_delete_dialog');\n        btnDeleteDialog.addEventListener('click', () => {\n            deleteCurrentDialog();\n        });\n        const btnShowHistory = document.getElementById('block_ai_chat_show_history');\n        btnShowHistory.addEventListener('click', () => {\n            showHistory();\n        });\n        // Views.\n        const btnChatwindow = document.getElementById(VIEW_CHATWINDOW);\n        btnChatwindow.addEventListener('mousedown', () => {\n            setView(VIEW_CHATWINDOW);\n        });\n        const btnFullWidth = document.getElementById(VIEW_OPENFULL);\n        btnFullWidth.addEventListener('mousedown', () => {\n            setView(VIEW_OPENFULL);\n        });\n        const btnDockRight = document.getElementById(VIEW_DOCKRIGHT);\n        btnDockRight.addEventListener('mousedown', () => {\n            setView(VIEW_DOCKRIGHT);\n        });\n        firstLoad = false;\n    }\n\n    helper.focustextarea();\n}\n\n\n/**\n * Webservice Get all conversations.\n */\nconst getConversations = async() => {\n    console.log(\"allConversations called\");\n    try {\n        // Ist hier await nötig um in init auf den Button listener zu warten?\n        allConversations = await externalServices.getAllConversations(userid, contextid);\n    } catch (error) {\n        displayException(error);\n    }\n};\n\n/**\n * Function to set conversation.\n * @param {*} id\n */\nconst showConversation = (id = 0) => {\n    console.log(\"showConversation called\");\n    // Dissallow changing conversations when question running.\n    if (aiAtWork) {\n        return;\n    }\n    // Change conversation or get last conversation.\n    if (id !== 0) {\n        // Set selected conversation.\n        conversation = allConversations.find(x => x.id === id);\n    } else if (typeof allConversations[0] !== 'undefined') {\n        // Set last conversation.\n        conversation = allConversations.at(0);\n    } else if (allConversations.length === 0) {\n        // Last conversation has been deleted.\n        newDialog(true);\n    }\n    clearMessages();\n    setModalHeader();\n    showMessages();\n};\n// Make globally accessible since it is used to show history in dropdownmenuitem.mustache.\ndocument.showConversation = showConversation;\n\n\n/**\n * Send input to ai connector.\n * @param {*} question\n */\nconst enterQuestion = async(question) => {\n\n    // Deny changing dialogs until answer present?\n    if (question == '') {\n        aiAtWork = false;\n        return;\n    }\n\n    // Add to conversation, answer not yet available.\n    showMessage(question, 'self', false);\n\n    // For first message, add a system message.\n    if (conversation.messages.length === 0) {\n        conversation.messages.push({\n            'message': 'Answer in german',\n            'sender': 'system',\n        });\n    }\n\n    // Ceck history for length limit.\n    const convHistory = await checkMessageHistoryLengthLimit(conversation.messages);\n\n    // Options, with conversation history.\n    const options = {\n        'component': 'block_ai_chat',\n        'contextid': contextid,\n        'conversationcontext': convHistory,\n    };\n\n    // For a new conversation, get an id.\n    if (conversation.id === 0) {\n        try {\n            let idresult = await externalServices.getNewConversationId(contextid);\n            conversation.id = idresult.id;\n        } catch (error) {\n            displayException(error);\n        }\n        options.forcenewitemid = true;\n    }\n\n    // Pass itemid / conversationid.\n    options.itemid = conversation.id;\n\n    // Send to local_ai_manager.\n    let requestresult = await manager.askLocalAiManager('chat', question, options);\n\n    // Handle errors.\n    if (requestresult.code != 200) {\n        requestresult = await errorHandling(requestresult, question, options);\n    }\n\n    // Write back answer.\n    showReply(requestresult.result);\n\n    // Ai is done.\n    aiAtWork = false;\n\n    // Attach copy listener.\n    let copy = document.querySelector('.ai_chat_modal .awaitanswer .copy');\n    copy.addEventListener('mousedown', () => {\n        helper.copyToClipboard(copy);\n    });\n\n    // Save new question and answer.\n    saveConversationLocally(question, requestresult.result);\n};\n\n/**\n * Render reply.\n * @param {string} text\n */\nconst showReply = async (text) => {\n    let field = document.querySelector('.ai_chat_modal .awaitanswer .text');\n    field.innerHTML = marked.parse(text);\n};\n\nconst showMessages = () => {\n    console.log(\"showMessages called\");\n    conversation.messages.forEach((val) => {\n        showMessage(val.message, val.sender);\n    });\n};\n\n/**\n * Show answer from local_ai_manager.\n * @param {*} text\n * @param {*} sender User or Ai\n * @param {*} answer Is answer in history\n */\nconst showMessage = async(text, sender = '', answer = true) => {\n    // Skip if sender is system.\n    if (sender === 'system') {\n        return;\n    }\n    // Imitate bool for message.mustache logic {{#sender}}.\n    if (sender === 'ai') {\n        sender = '';\n    }\n    const templateData = {\n        \"sender\": sender,\n        \"content\": marked.parse(text),\n        \"answer\": answer,\n    };\n    // Call the function to load and render our template.\n    const {html, js} = await Templates.renderForPromise('block_ai_chat/message', templateData);\n    Templates.appendNodeContents('.block_ai_chat-output', html, js);\n\n    // Add copy listener for replys.\n    if (sender === '') {\n        helper.attachCopyListenerLast();\n    }\n\n    // Scroll the modal content to the bottom.\n    helper.scrollToBottom();\n};\n\n/**\n * Create new / Reset dialog.\n * @param {bool} deleted\n */\nconst newDialog = (deleted = false) => {\n    console.log(\"newDialog called\");\n    if (aiAtWork) {\n        return;\n    }\n    // Add current convo local representation, if not already there.\n    if (allConversations.find(x => x.id === conversation.id) === undefined && !deleted) {\n        allConversations.push(conversation);\n    }\n    // Reset local conservation.\n    conversation = {\n        id: 0,\n        messages: [],\n    };\n    clearMessages();\n    setModalHeader(strNewDialog);\n};\n\n/**\n * Delete /hide current dialog.\n */\nconst deleteCurrentDialog = async() => {\n    console.log(\"deleteCurrentDialog called\");\n    if (conversation.id !== 0) {\n        try {\n            const deleted = await externalServices.deleteConversation(contextid, userid, conversation.id);\n            if (deleted) {\n                removeFromHistory();\n                showConversation();\n            }\n        } catch (error) {\n            displayException(error);\n        }\n    }\n};\n\n/**\n * Show conversation history.\n */\nconst showHistory = async() => {\n    console.log(\"showHistory called\");\n    // Change title and add backlink.\n    let title = '<a href=\"#\" id=\"block_ai_chat_backlink\"><i class=\"icon fa fa-arrow-left\"></i>' + strHistory + '</a>';\n    clearMessages(true);\n    setModalHeader(title);\n    const btnBacklink = document.getElementById('block_ai_chat_backlink');\n    btnBacklink.addEventListener('click', () => {\n        showConversation(conversation.id);\n        clearMessages();\n        setModalHeader();\n    });\n\n    // Iterate over conversations and group by date.\n    let groupedByDate = {};\n    allConversations.forEach((convo) => {\n        if (typeof convo.messages[1] !== 'undefined') {\n            // Conditionally shorten menu title, skip system message.\n            let title = convo.messages[1].message;\n            if (convo.messages[1].message.length > 50) {\n                title = convo.messages[1].message.substring(0, 50);\n                title += ' ...';\n            }\n\n            // Get date and sort convos into a date array.\n            const now = new Date();\n            const date = new Date(convo.timecreated * 1000);\n            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            const yesterday = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);\n            const twoWeeksAgo = new Date(now);\n            twoWeeksAgo.setDate(now.getDate() - 14);\n\n            const options = {weekday: 'long', day: '2-digit', month: '2-digit'};\n            const monthOptions = {month: 'long', year: '2-digit'};\n\n            let dateString = '';\n            if (date >= today) {\n                dateString = strToday;\n            } else if (date >= yesterday) {\n                dateString = strYesterday;\n            } else if (date >= twoWeeksAgo) {\n                dateString = date.toLocaleDateString(undefined, options);\n            } else {\n                dateString = date.toLocaleDateString(undefined, monthOptions);\n            }\n            let convItem = {\n                \"title\": title,\n                \"conversationid\": convo.id,\n            };\n\n            // Save entry under the date.\n            if (!groupedByDate[dateString]) {\n                groupedByDate[dateString] = [];\n            }\n            groupedByDate[dateString].push(convItem);\n        }\n    });\n\n    // Convert the grouped objects into an array format that Mustache can iterate over.\n    let convert = {\n        groups: Object.keys(groupedByDate).map(key => ({\n            key: key,\n            objects: groupedByDate[key]\n        }))\n    };\n\n    // Render history.\n    const templateData = {\n        \"dates\": convert.groups,\n    };\n    const {html, js} = await Templates.renderForPromise('block_ai_chat/history', templateData);\n    Templates.appendNodeContents('.ai_chat_modal .block_ai_chat-output', html, js);\n\n    // Add a listener for the new dialog button.\n    const btnNewDialog = document.getElementById('ai_chat_history_new_dialog');\n    btnNewDialog.addEventListener('mousedown', () => {\n        newDialog();\n    });\n};\n\n/**\n * Remove currrent conversation from history.\n */\nconst removeFromHistory = () => {\n    // Cant remove if new or not yet in history.\n    if (conversation.id !== 0 && allConversations.find(x => x.id === conversation.id) !== undefined) {\n        // Remove from dropdown.\n        const element = document.querySelector('.block_ai_chat_action_menu [data-id=\"' + conversation.id + '\"]');\n        element.remove();\n        // Build new allConversations array without deleted one.\n        allConversations = allConversations.filter(obj => obj.id !== conversation.id);\n    }\n};\n\n/**\n * Webservice Save conversation.\n * @param {*} question\n * @param {*} reply\n */\nconst saveConversationLocally = (question, reply) => {\n    // Add to local representation.\n    let message = {'message': question, 'sender': 'user'};\n    conversation.messages.push(message);\n    message = {'message': reply, 'sender': 'ai'};\n    conversation.messages.push(message);\n};\n\n/**\n * Clear output div.\n */\nconst clearMessages = (hideinput = false) => {\n    console.log(\"clearMessages called\");\n    const output = document.querySelector('.block_ai_chat-output');\n    output.innerHTML = '';\n    // For showing history.\n    let input = document.querySelector('.block_ai_chat-input');\n    if (hideinput) {\n        input.style.display = 'none';\n    } else {\n        input.style.display = 'flex';\n    }\n};\n\n/**\n * Set modal header title.\n * @param {*} title\n */\nconst setModalHeader = (setTitle = '') => {\n    let modalheader = document.querySelector('.ai_chat_modal .modal-title div');\n    let title = '';\n    if (modalheader !== null && (conversation.messages.length > 0 || setTitle.length)) {\n        if (!setTitle.length) {\n            title = conversation.messages[1].message;\n            if (conversation.messages[1].message.length > 50) {\n                title = conversation.messages[1].message.substring(0, 50);\n                title += ' ...';\n            }\n        } else {\n            title = setTitle;\n        }\n        modalheader.innerHTML = title;\n    }\n};\n\n/**\n * Attach event listener.\n * @param {*} textarea\n */\nconst addTextareaListener = (textarea) => {\n    textarea.addEventListener('keydown', textareaOnKeydown);\n};\n\n/**\n * Action for textarea submission.\n * @param {*} event\n */\nconst textareaOnKeydown = (event) => {\n    // TODO check for mobile devices.\n    if (event.key === 'Enter' && !aiAtWork && !event.shiftKey) {\n        aiAtWork = true;\n        enterQuestion(event.target.value);\n        event.preventDefault();\n        event.target.value = '';\n    }\n};\n\n/**\n * Submit form.\n */\nconst clickSubmitButton = () => {\n    // Var aiAtWork to make it impossible to submit multiple questions at once.\n    if (!aiAtWork) {\n        aiAtWork = true;\n        const textarea = document.getElementById('block_ai_chat-input-id');\n        enterQuestion(textarea.value);\n        textarea.value = '';\n    }\n};\n\n/**\n * Handle error from local_ai_manager.\n * @param {*} requestresult\n * @param {*} question\n * @param {*} options\n * @returns {object}\n */\nconst errorHandling = async(requestresult, question, options) => {\n\n    // If code 409, conversationid is already taken, try get new a one.\n    if (requestresult.code == 409) {\n        while (requestresult.code == 409) {\n            try {\n                let idresult = await externalServices.getNewConversationId(contextid);\n                conversation.id = idresult.id;\n                options.itemid = conversation.id;\n            } catch (error) {\n                displayException(error);\n            }\n            // Retry with new id.\n            requestresult = await manager.askLocalAiManager('chat', question, options);\n            return requestresult;\n        }\n    }\n\n    // If any other errorcode, alert with errormessage.\n    const errorString = await getString('errorwithcode', 'block_ai_chat', requestresult.code);\n    await alert(errorString, requestresult.result);\n\n    // Change answer styling to differentiate from ai.\n    const answerdivs = document.querySelectorAll('.awaitanswer');\n    const answerdiv = answerdivs[answerdivs.length - 1];\n    const messagediv = answerdiv.closest('.message');\n    messagediv.classList.add('text-danger');\n    const senderdiv = messagediv.querySelector('.identity');\n    senderdiv.textContent = 'System';\n\n    // And write generic error message in chatbot.\n    requestresult.result = await getString('error', 'block_ai_chat');\n\n    return requestresult;\n};\n\n/**\n * Check historic messages for max length.\n * @param {array} messages\n * @returns {array}\n */\nconst checkMessageHistoryLengthLimit = async(messages) => {\n    const length = messages.length;\n    console.log(\"checkHistoryLengthLimit called\");\n    if (length > maxHistory) {\n        // Cut history.\n        let shortenedMessages = [messages[0], ...messages.slice(-maxHistory)];\n        console.log(shortenedMessages);\n\n        // Show warning once per session.\n        if (!maxHistoryWarnings.has(conversation.id)) {\n            const maxHistoryString = await getString('maxhistory', 'block_ai_chat', maxHistory);\n            const warningErrorString = await getString('maxhistoryreached', 'block_ai_chat', maxHistory);\n            await alert(maxHistoryString, warningErrorString);\n            // Remember warning.\n            maxHistoryWarnings.add(conversation.id);\n        }\n        return shortenedMessages;\n    }\n    // Limit not reached, return messages.\n    return messages;\n};\n\n/**\n * Check if modal should close on outside click.\n * @param {*} event\n */\nconst checkOutsideClick = (event) => {\n    // View openfull acts like a normal modal.\n    if (viewmode != VIEW_OPENFULL) {\n        event.preventDefault();\n    }\n};\n\n/**\n * Set different viewmodes and save in local storage.\n * @param {string} mode\n */\nconst setView = (mode = '') => {\n    const key = 'chatmode' + userid;\n    // Check for saved viewmode.\n    let savedmode = LocalStorage.get(key);\n    if (!savedmode && mode == '') {\n        // Set default.\n        mode = VIEW_CHATWINDOW;\n    }\n    // Save viewmode and set global var.\n    LocalStorage.set(key, mode);\n    viewmode = mode;\n\n    // Set viewmode as bodyclass.\n    const body = document.querySelector('body');\n    body.classList.remove(VIEW_CHATWINDOW, VIEW_OPENFULL, VIEW_DOCKRIGHT);\n    body.classList.add(mode);\n};\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireDefault","_modal","externalServices","_templates","_modal_events","helper","manager","_localstorage","VIEW_CHATWINDOW","VIEW_OPENFULL","VIEW_DOCKRIGHT","strHistory","strNewDialog","strToday","strYesterday","badge","viewmode","modal","modalopen","conversation","id","messages","allConversations","userid","contextid","firstLoad","aiAtWork","maxHistory","maxHistoryWarnings","Set","DialogModal","Modal","static","configure","modalConfig","show","removeOnClose","isVerticallyCentered","super","titletest","this","setTitletest","value","hide","document","querySelector","classList","remove","_exports","init","async","params","new","history","create","templateContext","title","getRoot","on","e","target","add","ModalEvents","outsideClick","event","checkOutsideClick","getConversations","setView","conversationcontextLimit","getConversationcontextLimit","limit","getElementById","addEventListener","textarea","addTextareaListener","button","clickSubmitButton","showConversation","newDialog","deleteCurrentDialog","showHistory","focustextarea","showModal","renderInfoBox","getString","console","log","getAllConversations","error","displayException","arguments","length","undefined","find","x","at","clearMessages","setModalHeader","showMessages","enterQuestion","question","showMessage","push","message","sender","convHistory","checkMessageHistoryLengthLimit","options","component","conversationcontext","idresult","getNewConversationId","forcenewitemid","itemid","requestresult","askLocalAiManager","code","errorHandling","showReply","result","copy","copyToClipboard","saveConversationLocally","innerHTML","marked","parse","text","forEach","val","answer","templateData","content","html","js","Templates","renderForPromise","appendNodeContents","attachCopyListenerLast","scrollToBottom","deleted","deleteConversation","removeFromHistory","groupedByDate","convo","substring","now","Date","date","timecreated","today","getFullYear","getMonth","getDate","yesterday","twoWeeksAgo","setDate","weekday","day","month","monthOptions","year","dateString","toLocaleDateString","convItem","conversationid","dates","groups","keys","map","objects","filter","reply","hideinput","input","style","display","setTitle","modalheader","textareaOnKeydown","shiftKey","preventDefault","errorString","alert","answerdivs","querySelectorAll","messagediv","closest","textContent","shortenedMessages","slice","maxHistoryString","warningErrorString","mode","LocalStorage","body"],"mappings":"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"}