{"version":3,"file":"dialog.min.js","sources":["../src/dialog.js"],"sourcesContent":["import DialogModal from 'block_ai_chat/dialog_modal';\nimport * as externalServices from 'block_ai_chat/webservices';\nimport Templates from 'core/templates';\nimport {alert, exception as displayException} from 'core/notification';\nimport * as helper from 'block_ai_chat/helper';\nimport * as manager from 'block_ai_chat/ai_manager';\nimport {getString} from 'core/str';\nimport { marked } from \"block_ai_chat/vendor/marked.esm\";\n\n// Declare variables.\n// Modal.\nlet modal = {};\nlet modaltitle = '';\n\n// Current conversation.\nlet conversation = {\n    id: 0,\n    messages: [],\n};\n// All conversations.\nlet allConversations = [];\n// Userid.\nlet userid = 0;\n// Course context id.\nlet contextid = 0;\n// First load.\nlet firstLoad = true;\n// AI in process of answering.\nlet aiAtWork = false;\n// Maximum history included in query.\nlet maxHistory = 5;\n// Remember warnings for maximum history in this session.\nlet maxHistoryWarnings = new Set();\n\nexport const init = async(params) => {\n    userid = params.userid;\n    contextid = params.contextid;\n    modaltitle = params.title;\n\n    // Build modal.\n    modal = await DialogModal.create({\n        templateContext: {\n            title: modaltitle,\n            // history: history, // history dynamically added.\n        },\n    });\n\n    // Add class for styling when modal is displayed.\n    modal.getRoot().on('modal:shown', function(e) {\n        e.target.classList.add(\"ai_chat_modal\");\n    });\n\n    // Load conversations.\n    await getConversations();\n\n    // Get conversationcontext message limit.\n    let conversationcontextLimit = await externalServices.getConversationcontextLimit(contextid);\n    maxHistory = conversationcontextLimit.limit;\n\n    // Attach listener to the ai button to call modal.\n    let button = document.getElementById(\"ai_chat_button\");\n    button.addEventListener('mousedown', function() {\n        showModal(params);\n    });\n};\n\n/**\n * Show ai_chat modal.\n */\nasync function showModal() {\n\n    // Show modal.\n    await modal.show();\n\n    // Add listener for input submission.\n    const textarea = document.getElementById('block_ai_chat-input-id');\n    addTextareaListener(textarea);\n    const button = document.getElementById('block_ai_chat-submit-id');\n    button.addEventListener(\"click\", (event) => {\n        clickSubmitButton(event);\n    });\n\n    if (firstLoad) {\n        // Show conversation.\n        // Todo - Evtl. noch firstload verschönern, spinner für header und content z.b.\n        showConversation();\n\n        // Add history to dropdownmenu.\n        addToHistory(allConversations);\n\n        // Add listeners for dropdownmenu.\n        const btnNewDialog = document.getElementById('block_ai_chat_new_dialog');\n        btnNewDialog.addEventListener('mousedown', () => {\n            newDialog();\n        });\n        const btnDeleteDialog = document.getElementById('block_ai_chat_delete_dialog');\n        btnDeleteDialog.addEventListener('click', () => {\n            deleteCurrentDialog();\n        });\n        firstLoad = false;\n    }\n\n    helper.focustextarea();\n}\n\n\n/**\n * Webservice Get all conversations.\n */\nconst getConversations = async() => {\n    console.log(\"allConversations called\");\n    try {\n        // Ist hier await nötig um in init auf den Button listener zu warten?\n        allConversations = await externalServices.getAllConversations(userid, contextid);\n    } catch (error) {\n        displayException(error);\n    }\n};\n\n/**\n * Function to set conversation.\n * @param {*} id\n */\nconst showConversation = (id = 0) => {\n    console.log(\"showConversation called\");\n    // Dissallow changing conversations when question running.\n    if (aiAtWork) {\n        return;\n    }\n    // Change conversation or get last conversation.\n    if (id !== 0) {\n        // Set selected conversation.\n        conversation = allConversations.find(x => x.id === id);\n    } else if (typeof allConversations[0] !== 'undefined') {\n        // Set last conversation.\n        conversation = allConversations.at(0);\n    } else if (allConversations.length === 0) {\n        // Last conversation has been deleted.\n        newDialog(true);\n    }\n    clearMessages();\n    setModalHeader();\n    showMessages();\n};\n// Make globally accessible since it is used to show history in dropdownmenuitem.mustache.\ndocument.showConversation = showConversation;\n\n\n/**\n * Send input to ai connector.\n * @param {*} question\n */\nconst enterQuestion = async(question) => {\n\n    // Deny changing dialogs until answer present?\n    if (question == '') {\n        aiAtWork = false;\n        return;\n    }\n\n    // Add to conversation, answer not yet available.\n    showMessage(question, 'self', false);\n\n    // For first message, add a system message.\n    if (conversation.messages.length === 0) {\n        conversation.messages.push({\n            'message': 'Answer in german',\n            'sender': 'system',\n        });\n    }\n\n    // Ceck history for length limit.\n    const convHistory = await checkMessageHistoryLengthLimit(conversation.messages);\n\n    // Options, with conversation history.\n    const options = {\n        'component': 'block_ai_chat',\n        'contextid': contextid,\n        'conversationcontext': convHistory,\n    };\n\n    // For a new conversation, get an id.\n    if (conversation.id === 0) {\n        try {\n            let idresult = await externalServices.getNewConversationId(contextid);\n            conversation.id = idresult.id;\n        } catch (error) {\n            displayException(error);\n        }\n        options.forcenewitemid = true;\n    }\n\n    // Pass itemid / conversationid.\n    options.itemid = conversation.id;\n\n    // Send to local_ai_manager.\n    let requestresult = await manager.askLocalAiManager('chat', question, options);\n\n    // Handle errors.\n    if (requestresult.code != 200) {\n        requestresult = await errorHandling(requestresult, question, options);\n    }\n\n    // Write back answer.\n    showReply(requestresult.result);\n\n    // Ai is done.\n    aiAtWork = false;\n\n    // Attach copy listener.\n    let copy = document.querySelector('.ai_chat_modal .awaitanswer .copy');\n    copy.addEventListener('mousedown', () => {\n        helper.copyToClipboard(copy);\n    });\n\n    // Save new question and answer.\n    saveConversationLocally(question, requestresult.result);\n};\n\n/**\n * Render reply.\n * @param {string} text\n */\nconst showReply = async (text) => {\n    let field = document.querySelector('.ai_chat_modal .awaitanswer .text');\n    field.innerHTML = marked.parse(text);\n};\n\nconst showMessages = () => {\n    console.log(\"showMessages called\");\n    conversation.messages.forEach((val) => {\n        showMessage(val.message, val.sender);\n    });\n};\n\n/**\n * Show answer from local_ai_manager.\n * @param {*} text\n * @param {*} sender User or Ai\n * @param {*} answer Is answer in history\n */\nconst showMessage = async(text, sender = '', answer = true) => {\n    // Skip if sender is system.\n    if (sender === 'system') {\n        return;\n    }\n    // Imitate bool for message.mustache logic {{#sender}}.\n    if (sender === 'ai') {\n        sender = '';\n    }\n    const templateData = {\n        \"sender\": sender,\n        \"content\": marked.parse(text),\n        \"answer\": answer,\n    };\n    // Call the function to load and render our template.\n    const {html, js} = await Templates.renderForPromise('block_ai_chat/message', templateData);\n    Templates.appendNodeContents('.block_ai_chat-output', html, js);\n\n    // Add copy listener for replys.\n    if (sender === '') {\n        helper.attachCopyListenerLast();\n    }\n\n    // Scroll the modal content to the bottom.\n    helper.scrollToBottom();\n};\n\n/**\n * Create new / Reset dialog.\n * @param {bool} deleted\n */\nconst newDialog = (deleted = false) => {\n    console.log(\"newDialog called\");\n    if (aiAtWork) {\n        return;\n    }\n    // Add current convo to history and local representation, if not already there.\n    if (allConversations.find(x => x.id === conversation.id) === undefined && !deleted) {\n        addToHistory([conversation]);\n        allConversations.push(conversation);\n    }\n    // Reset local conservation.\n    conversation = {\n        id: 0,\n        messages: [],\n    };\n    clearMessages();\n    setModalHeader(true);\n};\n\n/**\n * Delete /hide current dialog.\n */\nconst deleteCurrentDialog = async() => {\n    console.log(\"deleteCurrentDialog called\");\n    if (conversation.id !== 0) {\n        try {\n            const deleted = await externalServices.deleteConversation(contextid, userid, conversation.id);\n            if (deleted) {\n                removeFromHistory();\n                showConversation();\n            }\n        } catch (error) {\n            displayException(error);\n        }\n    }\n};\n\n\n/**\n * Add conversations to history.\n * @param {*} convos Conversations\n */\nconst addToHistory = (convos) => {\n    convos.forEach(async(convo) => {\n        if (typeof convo.messages[1] !== 'undefined') {\n            // Conditionally shorten menu title, skip system message.\n            let title = convo.messages[1].message;\n            if (convo.messages[1].message.length > 50) {\n                title = convo.messages[1].message.substring(0, 50);\n                title += ' ...';\n            }\n\n            // Add entry in menu.\n            const templateData = {\n                \"title\": title,\n                \"conversationid\": convo.id,\n            };\n    \n            const {html, js} = await Templates.renderForPromise('block_ai_chat/dropdownmenuitem', templateData);\n            Templates.appendNodeContents('.block_ai_chat_action_menu .dropdown-menu', html, js);\n    \n            // If we add only one item, it is a new item and not the first and should be on top of history.\n            if (convos.length === 1 && allConversations.length > 1) {\n                console.log(\"move item to top called\");\n                // Make sure elements are in place to be worked with.\n                const dropdown = document.querySelector('.block_ai_chat_action_menu .dropdown-menu');\n                // Select the last element.\n                const lastItem = dropdown.lastElementChild;\n                // Get the reference element for the third position.\n                const thirdChild = dropdown.children[2];\n                // Remove the last item from its current position.\n                dropdown.removeChild(lastItem);\n                // Insert the last item at the new position (before the third child).\n                dropdown.insertBefore(lastItem, thirdChild);\n            }\n        }\n    });\n\n    // If we have more than 9 items, add scrollbar to menu.\n    if (convos.length > 9) {\n        const dropdown = document.querySelector('.block_ai_chat_action_menu .dropdown-menu');\n        dropdown.classList.add(\"addscroll\");\n    }\n};\n\n/**\n * Remove currrent conversation from history.\n */\nconst removeFromHistory = () => {\n    // Cant remove if new or not yet in history.\n    if (conversation.id !== 0 && allConversations.find(x => x.id === conversation.id) !== undefined) {\n        // Remove from dropdown.\n        const element = document.querySelector('.block_ai_chat_action_menu [data-id=\"' + conversation.id + '\"]');\n        element.remove();\n        // Build new allConversations array without deleted one.\n        allConversations = allConversations.filter(obj => obj.id !== conversation.id);\n    }\n};\n\n/**\n * Webservice Save conversation.\n * @param {*} question\n * @param {*} reply\n */\nconst saveConversationLocally = (question, reply) => {\n    // Add to local representation.\n    let message = {'message': question, 'sender': 'user'};\n    conversation.messages.push(message);\n    message = {'message': reply, 'sender': 'ai'};\n    conversation.messages.push(message);\n};\n\n/**\n * Clear output div.\n */\nconst clearMessages = () => {\n    console.log(\"clearMessages called\");\n    const output = document.querySelector('.block_ai_chat-output');\n    output.innerHTML = '';\n};\n\n/**\n * Set modal header title.\n * @param {*} empty\n */\nconst setModalHeader = (empty = false) => {\n    let modalheader = document.querySelector('.ai_chat_modal .modal-title div');\n    let title = '';\n    if (modalheader !== null && (conversation.messages.length > 0 || empty)) {\n        if (!empty) {\n            title = ' - ' + conversation.messages[1].message;\n            if (conversation.messages[1].message.length > 50) {\n                title = ' - ' + conversation.messages[1].message.substring(0, 50);\n                title += ' ...';\n            }\n        }\n        modalheader.textContent = modaltitle + title;\n    }\n};\n\n/**\n * Attach event listener.\n * @param {*} textarea\n */\nconst addTextareaListener = (textarea) => {\n    textarea.addEventListener('keydown', textareaOnKeydown);\n};\n\n/**\n * Action for textarea submission.\n * @param {*} event\n */\nconst textareaOnKeydown = (event) => {\n    // TODO check for mobile devices.\n    if (event.key === 'Enter' && !aiAtWork && !event.shiftKey) {\n        aiAtWork = true;\n        enterQuestion(event.target.value);\n        event.preventDefault();\n        event.target.value = '';\n    }\n};\n\n/**\n * Submit form.\n */\nconst clickSubmitButton = () => {\n    // Var aiAtWork to make it impossible to submit multiple questions at once.\n    if (!aiAtWork) {\n        aiAtWork = true;\n        const textarea = document.getElementById('block_ai_chat-input-id');\n        enterQuestion(textarea.value);\n        textarea.value = '';\n    }\n};\n\n/**\n * Handle error from local_ai_manager.\n * @param {*} requestresult\n * @param {*} question\n * @param {*} options\n * @returns {object}\n */\nconst errorHandling = async(requestresult, question, options) => {\n\n    // If code 409, conversationid is already taken, try get new a one.\n    if (requestresult.code == 409) {\n        while (requestresult.code == 409) {\n            try {\n                let idresult = await externalServices.getNewConversationId(contextid);\n                conversation.id = idresult.id;\n                options.itemid = conversation.id;\n            } catch (error) {\n                displayException(error);\n            }\n            // Retry with new id.\n            requestresult = await manager.askLocalAiManager('chat', question, options);\n            return requestresult;\n        }\n    }\n\n    // If any other errorcode, alert with errormessage.\n    const errorString = await getString('errorwithcode', 'block_ai_chat', requestresult.code);\n    await alert(errorString, requestresult.result);\n\n    // Change answer styling to differentiate from ai.\n    const answerdivs = document.querySelectorAll('.awaitanswer');\n    const answerdiv = answerdivs[answerdivs.length - 1];\n    const messagediv = answerdiv.closest('.message');\n    messagediv.classList.add('text-danger');\n    const senderdiv = messagediv.querySelector('.identity');\n    senderdiv.textContent = 'System';\n\n    // And write generic error message in chatbot.\n    requestresult.result = await getString('error', 'block_ai_chat');\n\n    return requestresult;\n};\n\n/**\n * Check historic messages for max length.\n * @param {array} messages\n * @returns {array}\n */\nconst checkMessageHistoryLengthLimit = async(messages) => {\n    const length = messages.length;\n    console.log(\"checkHistoryLengthLimit called\");\n    if (length > maxHistory) {\n        // Cut history.\n        let shortenedMessages = [messages[0], ...messages.slice(-maxHistory)];\n        console.log(shortenedMessages);\n\n        // Show warning once per session.\n        if (!maxHistoryWarnings.has(conversation.id)) {\n            const maxHistoryString = await getString('maxhistory', 'block_ai_chat', maxHistory);\n            const warningErrorString = await getString('maxhistoryreached', 'block_ai_chat', maxHistory);\n            await alert(maxHistoryString, warningErrorString);\n            // Remember warning.\n            maxHistoryWarnings.add(conversation.id);\n        }\n        return shortenedMessages;\n    }\n    // Limit not reached, return messages.\n    return messages;\n};"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireDefault","_dialog_modal","externalServices","_templates","helper","manager","modal","modaltitle","conversation","id","messages","allConversations","userid","contextid","firstLoad","aiAtWork","maxHistory","maxHistoryWarnings","Set","_exports","init","async","params","title","DialogModal","create","templateContext","getRoot","on","e","target","classList","add","getConversations","conversationcontextLimit","getConversationcontextLimit","limit","document","getElementById","addEventListener","show","textarea","addTextareaListener","button","event","clickSubmitButton","showConversation","addToHistory","newDialog","deleteCurrentDialog","focustextarea","showModal","console","log","getAllConversations","error","displayException","arguments","length","undefined","find","x","at","clearMessages","setModalHeader","showMessages","enterQuestion","question","showMessage","push","message","sender","convHistory","checkMessageHistoryLengthLimit","options","component","conversationcontext","idresult","getNewConversationId","forcenewitemid","itemid","requestresult","askLocalAiManager","code","errorHandling","showReply","result","copy","querySelector","copyToClipboard","saveConversationLocally","innerHTML","marked","parse","text","forEach","val","answer","templateData","content","html","js","Templates","renderForPromise","appendNodeContents","attachCopyListenerLast","scrollToBottom","deleted","deleteConversation","removeFromHistory","convos","convo","substring","conversationid","dropdown","lastItem","lastElementChild","thirdChild","children","removeChild","insertBefore","remove","filter","reply","empty","modalheader","textContent","textareaOnKeydown","shiftKey","value","preventDefault","errorString","getString","alert","answerdivs","querySelectorAll","messagediv","closest","shortenedMessages","slice","maxHistoryString","warningErrorString"],"mappings":"+UAKoD,SAAAA,yBAAAC,mCAAAC,wBAAAC,sBAAAD,QAAAE,qBAAAF,eAAAF,kCAAAC,oBAAAA,YAAAG,iBAAAD,oBAAAF,aAAA,SAAAI,wBAAAC,IAAAL,iBAAAA,aAAAK,KAAAA,IAAAC,kBAAAD,cAAAA,sBAAAA,wBAAAA,WAAAE,QAAAF,SAAAG,MAAAT,yBAAAC,gBAAAQ,OAAAA,MAAAC,IAAAJ,YAAAG,MAAAE,IAAAL,SAAAM,UAAAC,sBAAAC,OAAAC,gBAAAD,OAAAE,iCAAAC,OAAAX,mBAAAW,KAAAH,OAAAI,UAAAC,eAAAC,KAAAd,IAAAW,UAAAI,KAAAR,sBAAAC,OAAAE,yBAAAV,IAAAW,UAAAI,OAAAA,KAAAV,KAAAU,KAAAC,KAAAR,OAAAC,eAAAH,OAAAK,IAAAI,MAAAT,OAAAK,KAAAX,IAAAW,YAAAL,OAAAJ,QAAAF,IAAAG,OAAAA,MAAAa,IAAAhB,IAAAM,QAAAA,OAAA,SAAAW,uBAAAjB,YAAAA,KAAAA,IAAAC,WAAAD,KAAAE,QAAAF,kFALpDkB,cAAAD,uBAAAC,eACAC,iBAAApB,wBAAAoB,kBACAC,WAAAH,uBAAAG,YAEAC,OAAAtB,wBAAAsB,QACAC,QAAAvB,wBAAAuB,SAMA,IAAIC,MAAQ,GACRC,WAAa,GAGbC,aAAe,CACfC,GAAI,EACJC,SAAU,IAGVC,iBAAmB,GAEnBC,OAAS,EAETC,UAAY,EAEZC,WAAY,EAEZC,UAAW,EAEXC,WAAa,EAEbC,mBAAqB,IAAIC,IAgC3BC,SAAAC,KA9BkBC,eAChBT,OAASU,OAAOV,OAChBC,UAAYS,OAAOT,UACnBN,WAAae,OAAOC,MAGpBjB,YAAckB,sBAAYC,OAAO,CAC7BC,gBAAiB,CACbH,MAAOhB,cAMfD,MAAMqB,UAAUC,GAAG,eAAe,SAASC,GACvCA,EAAEC,OAAOC,UAAUC,IAAI,0BAIrBC,mBAGN,IAAIC,+BAAiChC,iBAAiBiC,4BAA4BtB,WAClFG,WAAakB,yBAAyBE,MAGzBC,SAASC,eAAe,kBAC9BC,iBAAiB,aAAa,YAQzClB,uBAGUf,MAAMkC,OAGZ,MAAMC,SAAWJ,SAASC,eAAe,0BACzCI,oBAAoBD,UACpB,MAAME,OAASN,SAASC,eAAe,2BAKvC,GAJAK,OAAOJ,iBAAiB,SAAUK,QAC9BC,kBAAkBD,MAAM,IAGxB9B,UAAW,CAGXgC,mBAGAC,aAAapC,kBAGQ0B,SAASC,eAAe,4BAChCC,iBAAiB,aAAa,KACvCS,WAAW,IAESX,SAASC,eAAe,+BAChCC,iBAAiB,SAAS,KACtCU,qBAAqB,IAEzBnC,WAAY,EAGhBV,OAAO8C,gBAxCHC,KACF,EA8CN,MAAMlB,iBAAmBZ,UACrB+B,QAAQC,IAAI,2BACZ,IAEI1C,uBAAyBT,iBAAiBoD,oBAAoB1C,OAAQC,WACxE,MAAO0C,QACL,EAAAC,yBAAiBD,SAQnBT,iBAAmB,WAAY,IAAXrC,GAAEgD,UAAAC,eAAAC,IAAAF,aAAAA,aAAG,EAC3BL,QAAQC,IAAI,2BAERtC,WAIO,IAAPN,GAEAD,aAAeG,iBAAiBiD,MAAKC,GAAKA,EAAEpD,KAAOA,UACb,IAAxBE,iBAAiB,GAE/BH,aAAeG,iBAAiBmD,GAAG,GACA,IAA5BnD,iBAAiB+C,QAExBV,WAAU,GAEde,gBACAC,iBACAC,iBAGJ5B,SAASS,iBAAmBA,iBAO5B,MAAMoB,cAAgB7C,iBAGlB,GAAgB,IAAZ8C,SAEA,YADApD,UAAW,GAKfqD,YAAYD,SAAU,QAAQ,GAGO,IAAjC3D,aAAaE,SAASgD,QACtBlD,aAAaE,SAAS2D,KAAK,CACvBC,QAAW,mBACXC,OAAU,WAKlB,MAAMC,kBAAoBC,+BAA+BjE,aAAaE,UAGhEgE,QAAU,CACZC,UAAa,gBACb9D,UAAaA,UACb+D,oBAAuBJ,aAI3B,GAAwB,IAApBhE,aAAaC,GAAU,CACvB,IACI,IAAIoE,eAAiB3E,iBAAiB4E,qBAAqBjE,WAC3DL,aAAaC,GAAKoE,SAASpE,GAC7B,MAAO8C,QACL,EAAAC,yBAAiBD,OAErBmB,QAAQK,gBAAiB,EAI7BL,QAAQM,OAASxE,aAAaC,GAG9B,IAAIwE,oBAAsB5E,QAAQ6E,kBAAkB,OAAQf,SAAUO,SAG5C,KAAtBO,cAAcE,OACdF,oBAAsBG,cAAcH,cAAed,SAAUO,UAIjEW,UAAUJ,cAAcK,QAGxBvE,UAAW,EAGX,IAAIwE,KAAOlD,SAASmD,cAAc,qCAClCD,KAAKhD,iBAAiB,aAAa,KAC/BnC,OAAOqF,gBAAgBF,KAAK,IAIhCG,wBAAwBvB,SAAUc,cAAcK,OAAO,EAOrDD,UAAYhE,aACFgB,SAASmD,cAAc,qCAC7BG,UAAYC,eAAOC,MAAMC,KAAK,EAGlC7B,aAAeA,KACjBb,QAAQC,IAAI,uBACZ7C,aAAaE,SAASqF,SAASC,MAC3B5B,YAAY4B,IAAI1B,QAAS0B,IAAIzB,OAAO,GACtC,EASAH,YAAc/C,eAAMyE,MAAqC,IAA/BvB,OAAMd,UAAAC,eAAAC,IAAAF,aAAAA,aAAG,GAAIwC,SAAMxC,UAAAC,eAAAC,IAAAF,eAAAA,aAE/C,GAAe,WAAXc,OACA,OAGW,OAAXA,SACAA,OAAS,IAEb,MAAM2B,aAAe,CACjB3B,OAAUA,OACV4B,QAAWP,eAAOC,MAAMC,MACxBG,OAAUA,SAGRG,KAACA,KAAIC,GAAEA,UAAYC,mBAAUC,iBAAiB,wBAAyBL,cAC7EI,mBAAUE,mBAAmB,wBAAyBJ,KAAMC,IAG7C,KAAX9B,QACAnE,OAAOqG,yBAIXrG,OAAOsG,kBAOL1D,UAAY,WAAqB,IAApB2D,QAAOlD,UAAAC,eAAAC,IAAAF,cAAAA,aACtBL,QAAQC,IAAI,oBACRtC,gBAIyD4C,IAAzDhD,iBAAiBiD,MAAKC,GAAKA,EAAEpD,KAAOD,aAAaC,MAAsBkG,UACvE5D,aAAa,CAACvC,eACdG,iBAAiB0D,KAAK7D,eAG1BA,aAAe,CACXC,GAAI,EACJC,SAAU,IAEdqD,gBACAC,gBAAe,KAMbf,oBAAsB5B,UAExB,GADA+B,QAAQC,IAAI,8BACY,IAApB7C,aAAaC,GACb,UAC0BP,iBAAiB0G,mBAAmB/F,UAAWD,OAAQJ,aAAaC,MAEtFoG,oBACA/D,oBAEN,MAAOS,QACL,EAAAC,yBAAiBD,SAUvBR,aAAgB+D,SAqClB,GApCAA,OAAOf,SAAQ1E,cACX,QAAiC,IAAtB0F,MAAMrG,SAAS,GAAoB,CAE1C,IAAIa,MAAQwF,MAAMrG,SAAS,GAAG4D,QAC1ByC,MAAMrG,SAAS,GAAG4D,QAAQZ,OAAS,KACnCnC,MAAQwF,MAAMrG,SAAS,GAAG4D,QAAQ0C,UAAU,EAAG,IAC/CzF,OAAS,QAIb,MAAM2E,aAAe,CACjB3E,MAASA,MACT0F,eAAkBF,MAAMtG,KAGtB2F,KAACA,KAAIC,GAAEA,UAAYC,mBAAUC,iBAAiB,iCAAkCL,cAItF,GAHAI,mBAAUE,mBAAmB,4CAA6CJ,KAAMC,IAG1D,IAAlBS,OAAOpD,QAAgB/C,iBAAiB+C,OAAS,EAAG,CACpDN,QAAQC,IAAI,2BAEZ,MAAM6D,SAAW7E,SAASmD,cAAc,6CAElC2B,SAAWD,SAASE,iBAEpBC,WAAaH,SAASI,SAAS,GAErCJ,SAASK,YAAYJ,UAErBD,SAASM,aAAaL,SAAUE,iBAMxCP,OAAOpD,OAAS,EAAG,CACFrB,SAASmD,cAAc,6CAC/BzD,UAAUC,IAAI,eAOzB6E,kBAAoBA,KAEtB,GAAwB,IAApBrG,aAAaC,SAAqEkD,IAAzDhD,iBAAiBiD,MAAKC,GAAKA,EAAEpD,KAAOD,aAAaC,KAAmB,CAE7E4B,SAASmD,cAAc,wCAA0ChF,aAAaC,GAAK,MAC3FgH,SAER9G,iBAAmBA,iBAAiB+G,QAAO3I,KAAOA,IAAI0B,KAAOD,aAAaC,OAS5EiF,wBAA0BA,CAACvB,SAAUwD,SAEvC,IAAIrD,QAAU,CAACA,QAAWH,SAAUI,OAAU,QAC9C/D,aAAaE,SAAS2D,KAAKC,SAC3BA,QAAU,CAACA,QAAWqD,MAAOpD,OAAU,MACvC/D,aAAaE,SAAS2D,KAAKC,QAAQ,EAMjCP,cAAgBA,KAClBX,QAAQC,IAAI,wBACGhB,SAASmD,cAAc,yBAC/BG,UAAY,EAAE,EAOnB3B,eAAiB,WAAmB,IAAlB4D,MAAKnE,UAAAC,eAAAC,IAAAF,cAAAA,aACrBoE,YAAcxF,SAASmD,cAAc,mCACrCjE,MAAQ,GACQ,OAAhBsG,cAAyBrH,aAAaE,SAASgD,OAAS,GAAKkE,SACxDA,QACDrG,MAAQ,MAAQf,aAAaE,SAAS,GAAG4D,QACrC9D,aAAaE,SAAS,GAAG4D,QAAQZ,OAAS,KAC1CnC,MAAQ,MAAQf,aAAaE,SAAS,GAAG4D,QAAQ0C,UAAU,EAAG,IAC9DzF,OAAS,SAGjBsG,YAAYC,YAAcvH,WAAagB,QAQzCmB,oBAAuBD,WACzBA,SAASF,iBAAiB,UAAWwF,kBAAkB,EAOrDA,kBAAqBnF,QAEL,UAAdA,MAAMlD,KAAoBqB,UAAa6B,MAAMoF,WAC7CjH,UAAW,EACXmD,cAActB,MAAMd,OAAOmG,OAC3BrF,MAAMsF,iBACNtF,MAAMd,OAAOmG,MAAQ,KAOvBpF,kBAAoBA,KAEtB,IAAK9B,SAAU,CACXA,UAAW,EACX,MAAM0B,SAAWJ,SAASC,eAAe,0BACzC4B,cAAczB,SAASwF,OACvBxF,SAASwF,MAAQ,KAWnB7C,cAAgB/D,MAAM4D,cAAed,SAAUO,WAGjD,GAA0B,KAAtBO,cAAcE,KACd,KAA6B,KAAtBF,cAAcE,MAAa,CAC9B,IACI,IAAIN,eAAiB3E,iBAAiB4E,qBAAqBjE,WAC3DL,aAAaC,GAAKoE,SAASpE,GAC3BiE,QAAQM,OAASxE,aAAaC,GAChC,MAAO8C,QACL,EAAAC,yBAAiBD,OAIrB,OADA0B,oBAAsB5E,QAAQ6E,kBAAkB,OAAQf,SAAUO,SAM1E,MAAMyD,kBAAoB,EAAAC,gBAAU,gBAAiB,gBAAiBnD,cAAcE,YAC9E,EAAAkD,qBAAMF,YAAalD,cAAcK,QAGvC,MAAMgD,WAAajG,SAASkG,iBAAiB,gBAEvCC,WADYF,WAAWA,WAAW5E,OAAS,GACpB+E,QAAQ,YACrCD,WAAWzG,UAAUC,IAAI,eAOzB,OANkBwG,WAAWhD,cAAc,aACjCsC,YAAc,SAGxB7C,cAAcK,aAAe,EAAA8C,gBAAU,QAAS,iBAEzCnD,aAAa,EAQlBR,+BAAiCpD,iBACnC,MAAMqC,OAAShD,SAASgD,OAExB,GADAN,QAAQC,IAAI,kCACRK,OAAS1C,WAAY,CAErB,IAAI0H,kBAAoB,CAAChI,SAAS,MAAOA,SAASiI,OAAO3H,aAIzD,GAHAoC,QAAQC,IAAIqF,oBAGPzH,mBAAmB9B,IAAIqB,aAAaC,IAAK,CAC1C,MAAMmI,uBAAyB,EAAAR,gBAAU,aAAc,gBAAiBpH,YAClE6H,yBAA2B,EAAAT,gBAAU,oBAAqB,gBAAiBpH,kBAC3E,EAAAqH,qBAAMO,iBAAkBC,oBAE9B5H,mBAAmBe,IAAIxB,aAAaC,IAExC,OAAOiI,kBAGX,OAAOhI,QAAQ,CACjB"}