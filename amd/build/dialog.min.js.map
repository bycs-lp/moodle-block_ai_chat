{"version":3,"file":"dialog.min.js","sources":["../src/dialog.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Modal from 'core/modal';\nimport * as externalServices from 'block_ai_chat/webservices';\nimport Templates from 'core/templates';\nimport {alert as displayAlert, exception as displayException, deleteCancelPromise} from 'core/notification';\nimport ModalEvents from 'core/modal_events';\nimport ModalForm from 'core_form/modalform';\nimport * as helper from 'block_ai_chat/helper';\nimport * as manager from 'block_ai_chat/ai_manager';\nimport {getString} from 'core/str';\nimport {renderInfoBox} from 'local_ai_manager/infobox';\nimport {renderUserQuota} from 'local_ai_manager/userquota';\nimport {getAiConfig} from 'local_ai_manager/config';\nimport LocalStorage from 'core/localstorage';\nimport {escapeHTML, hash} from './helper';\nimport * as TinyAiUtils from 'tiny_ai/utils';\nimport TinyAiEditorUtils from 'tiny_ai/editor_utils';\nimport {constants as TinyAiConstants} from 'tiny_ai/constants';\n\n// Declare variables.\nconst VIEW_CHATWINDOW = 'block_ai_chat_chatwindow';\nconst VIEW_OPENFULL = 'block_ai_chat_openfull';\nconst VIEW_DOCKRIGHT = 'block_ai_chat_dockright';\nconst MODAL_OPEN = 'block_ai_chat_open';\n\n// Modal.\nlet modal = {};\nlet strHistory;\nlet strNewDialog;\nlet strToday;\nlet strYesterday;\nlet strDefinePersona;\nlet strNewPersona;\nlet strUserTemplates;\nlet strSystemTemplates;\nlet personaForm = {};\nlet personaPrompt = '';\nlet personaInfo = '';\nlet personaLink = '';\nlet personaNewname = {};\nlet personaButtondelete = {};\nlet personaUserinfo = {};\nlet personaInputprompt = {};\nlet showPersona = false;\nlet optionsForm = {};\nlet showOptions = false;\nlet badge;\nlet viewmode;\nlet modalopen = false;\n\n// Current conversation.\nlet conversation = {\n    id: 0,\n    messages: [],\n};\n// All conversations.\nlet allConversations = [];\n// Userid.\nlet userid = 0;\n// Block context id.\nlet contextid = 0;\n// First load.\nlet firstLoad = true;\n// AI in process of answering.\nlet aiAtWork = false;\n// Maximum history included in query, should be reset via webservice.\nlet maxHistory = 5;\n// Remember warnings for maximum history in this session.\nlet maxHistoryWarnings = new Set();\n// Tenantconfig.\nlet tenantConfig = {};\nlet chatConfig = {};\n\nclass DialogModal extends Modal {\n    static TYPE = \"block_ai_chat/dialog_modal\";\n    static TEMPLATE = \"block_ai_chat/dialog_modal\";\n\n    configure(modalConfig) {\n        // Show this modal on instantiation.\n        modalConfig.show = false;\n\n        // Remove from the DOM on close.\n        modalConfig.removeOnClose = false;\n\n        modalConfig.isVerticallyCentered = false;\n\n        super.configure(modalConfig);\n\n        // Accept our own custom arguments too.\n        if (modalConfig.titletest) {\n            this.setTitletest(modalConfig.titletest);\n        }\n    }\n\n    setTitletest(value) {\n        this.titletest = value;\n    }\n\n    hide() {\n        super.hide();\n        // Keep track of state, to restrict changes to block_ai_chat modal.\n        modalopen = false;\n        const body = document.querySelector('body');\n        body.classList.remove(MODAL_OPEN);\n    }\n}\n\nexport const init = async(params) => {\n    // Read params.\n    userid = params.userid;\n    contextid = params.contextid;\n    strNewDialog = params.new;\n    strHistory = params.history;\n    strDefinePersona = params.persona;\n    strNewPersona = params.newpersona;\n    strUserTemplates = params.usertemplates;\n    strSystemTemplates = params.systemtemplates;\n    personaPrompt = params.personaprompt;\n    personaInfo = params.personainfo;\n    showPersona = params.showpersona;\n    showOptions = params.showoptions;\n    personaLink = params.personalink;\n    badge = params.badge;\n    // Disable badge.\n    badge = false;\n\n    // Get configuration.\n    const aiConfig = await getAiConfig();\n    tenantConfig = aiConfig;\n    chatConfig = aiConfig.purposes.find(p => p.purpose === \"chat\");\n\n    // Build chat dialog modal.\n    modal = await DialogModal.create({\n        templateContext: {\n            title: strNewDialog,\n            badge: badge,\n            showPersona: showPersona,\n            showOptions: showOptions,\n        },\n    });\n\n    // Add class for styling when modal is displayed.\n    modal.getRoot().on('modal:shown', function(e) {\n        e.target.classList.add(\"block_ai_chat_modal\");\n    });\n\n    // Conditionally prevent outside click event.\n    modal.getRoot().on(ModalEvents.outsideClick, event => {\n        checkOutsideClick(event);\n    });\n\n    // Check and set viewmode.\n    setView();\n\n    // Attach listener to the ai button to call modal.\n    let button = document.getElementById('ai_chat_button');\n    button.addEventListener('mousedown', async() => {\n        showModal(params);\n    });\n\n    // Get strings.\n    strToday = await getString('today', 'core');\n    strYesterday = await getString('yesterday', 'block_ai_chat');\n\n    // Create a MediaQueryList object to check for small screens.\n    const mediaQuery = window.matchMedia(\"(max-width: 576px)\");\n\n    // Attach the event listener to handle changes.\n    mediaQuery.addEventListener('change', handleScreenWidthChange);\n\n    // Initial check for screenwidth.\n    if (window.innerWidth <= 576) {\n        setView(VIEW_OPENFULL);\n    }\n};\n\n/**\n * Show ai_chat modal.\n */\nasync function showModal() {\n    // Switch for repeated clicking.\n    if (modalopen) {\n        modal.hide();\n        return;\n    }\n\n    // Show modal.\n    await modal.show();\n    modalopen = true;\n    const body = document.querySelector('body');\n    body.classList.add(MODAL_OPEN);\n\n    // Add listener for input submission.\n    const textarea = document.getElementById('block_ai_chat-input-id');\n    addTextareaListener(textarea);\n    const button = document.getElementById('block_ai_chat-submit-id');\n    button.addEventListener(\"click\", (event) => {\n        clickSubmitButton(event);\n    });\n\n    if (firstLoad) {\n        // Load conversations.\n        await getConversations();\n\n        // Show conversation.\n        showConversation();\n\n        // Get conversationcontext message limit.\n        let reply = await externalServices.getConversationcontextLimit(contextid);\n        maxHistory = reply.limit;\n\n\n        // Add listeners for dropdownmenus.\n        // Actions.\n        const btnNewDialog = document.getElementById('block_ai_chat_new_dialog');\n        btnNewDialog.addEventListener('click', () => {\n            newDialog();\n        });\n        const btnDeleteDialog = document.getElementById('block_ai_chat_delete_dialog');\n        btnDeleteDialog.addEventListener('click', () => {\n            deleteCurrentDialog();\n        });\n        const btnShowHistory = document.getElementById('block_ai_chat_show_history');\n        btnShowHistory.addEventListener('click', () => {\n            showHistory();\n        });\n        const btnDefinePersona = document.getElementById('block_ai_chat_define_persona');\n        if (btnDefinePersona) {\n            btnDefinePersona.addEventListener('click', () => {\n                showPersonasModal();\n            });\n        }\n        const btnOptions = document.getElementById('block_ai_chat_options');\n        if (btnOptions) {\n            btnOptions.addEventListener('click', () => {\n                showOptionsModal();\n            });\n        }\n        // Views.\n        const btnChatwindow = document.getElementById(VIEW_CHATWINDOW);\n        btnChatwindow.addEventListener('click', () => {\n            setView(VIEW_CHATWINDOW);\n        });\n        const btnFullWidth = document.getElementById(VIEW_OPENFULL);\n        btnFullWidth.addEventListener('click', () => {\n            setView(VIEW_OPENFULL);\n        });\n        const btnDockRight = document.getElementById(VIEW_DOCKRIGHT);\n        btnDockRight.addEventListener('click', () => {\n            setView(VIEW_DOCKRIGHT);\n        });\n\n        // Show userquota.\n        await renderUserQuota('#block_ai_chat_userquota', ['chat']);\n        // Show infobox.\n        await renderInfoBox(\n            'block_ai_chat', userid, '.block_ai_chat_modal_body [data-content=\"local_ai_manager_infobox\"]', ['chat']\n        );\n        // Show persona info.\n        if (personaPrompt !== '') {\n            const targetElement = document.querySelector('.block_ai_chat_modal_body [data-content=\"local_ai_manager_infobox\"]');\n            const templateContext = {\n                'persona': personaInfo,\n                'personainfourl': personaLink,\n            };\n            const {html, js} = await Templates.renderForPromise('block_ai_chat/persona_infobox', templateContext);\n            Templates.appendNodeContents(targetElement, html, js);\n        }\n\n        // Check if all permissions and settings are correct.\n        const message = await userAllowed();\n        if (message !== '') {\n            const notice = await getString('notice', 'block_ai_chat');\n            await displayAlert(notice, message);\n        }\n\n        const aiUtilsButton = document.querySelector('[data-action=\"openaiutils\"]');\n        const uniqid = Math.random().toString(16).slice(2);\n\n        await TinyAiUtils.init(uniqid, TinyAiConstants.modalModes.standalone);\n        aiUtilsButton.addEventListener('click', async() => {\n            // We try to find selected text or images and inject it into the AI tools.\n            const selectionObject = window.getSelection();\n            const range = selectionObject.getRangeAt(0);\n            const container = document.createElement('div');\n            container.appendChild(range.cloneContents());\n            const images = container.querySelectorAll('img');\n            if (images.length > 0 && images[0].src) {\n                // If there are more than one we just use the first one.\n                const image = images[0];\n                // This should work for both external and data urls.\n                const fetchResult = await fetch(image.src);\n                const data = await fetchResult.blob();\n                TinyAiUtils.getDatamanager(uniqid).setSelectionImg(data);\n            }\n\n            // If currently there is text selected we inject it.\n            if (selectionObject.toString() && selectionObject.toString().length > 0) {\n                TinyAiUtils.getDatamanager(uniqid).setSelection(selectionObject.toString());\n            }\n\n            const editorUtils = new TinyAiEditorUtils(uniqid, 'block_ai_chat', contextid, userid, null);\n            TinyAiUtils.setEditorUtils(uniqid, editorUtils);\n            await editorUtils.displayDialogue();\n        });\n\n        firstLoad = false;\n    }\n\n    helper.focustextarea();\n}\n\n\n/**\n * Webservice Get all conversations.\n */\nconst getConversations = async() => {\n    try {\n        allConversations = await externalServices.getAllConversations(userid, contextid);\n    } catch (error) {\n        displayException(error);\n    }\n};\n\n/**\n * Function to set conversation.\n * @param {*} id\n */\nconst showConversation = (id = 0) => {\n    // Dissallow changing conversations when question running.\n    if (aiAtWork) {\n        return;\n    }\n    // Change conversation or get last conversation.\n    if (id !== 0) {\n        // Set selected conversation.\n        conversation = allConversations.find(x => x.id === id);\n    } else if (typeof allConversations[0] !== 'undefined') {\n        // Set last conversation.\n        conversation = allConversations.at(allConversations.length - 1);\n    } else if (allConversations.length === 0) {\n        // Last conversation has been deleted.\n        newDialog(true);\n    }\n    clearMessages();\n    setModalHeader();\n    showMessages();\n};\n// Make globally accessible since it is used to show history in dropdownmenuitem.mustache.\ndocument.showConversation = showConversation;\n\n\n/**\n * Send input to ai connector.\n * @param {*} question\n */\nconst enterQuestion = async(question) => {\n\n    // Deny changing dialogs until answer present?\n    if (question == '') {\n        aiAtWork = false;\n        return;\n    }\n    const message = await userAllowed();\n    if (message !== '') {\n        const notice = await getString('noticenewquestion', 'block_ai_chat');\n        await displayAlert(notice, message);\n        aiAtWork = false;\n        return;\n    }\n\n    // Add to conversation, answer not yet available.\n    showMessage(question, 'self', false);\n\n    // For first message, add the personaprompt, even if empty.\n    // Since we dont know if the personaPrompt was changed, always replace it.\n    conversation.messages[0] = {\n        'message': personaPrompt,\n        'sender': 'system'\n    };\n\n    // Check history for length limit.\n    const convHistory = await checkMessageHistoryLengthLimit(conversation.messages);\n\n    // Options, with conversation history.\n    const options = {\n        'component': 'block_ai_chat',\n        'conversationcontext': convHistory\n    };\n\n    // For a new conversation, get an id.\n    if (conversation.id === 0) {\n        try {\n            let idresult = await externalServices.getNewConversationId(contextid);\n            conversation.id = idresult.id;\n            conversation.timecreated = Math.floor(Date.now() / 1000);\n            setModalHeader(escapeHTML(question));\n        } catch (error) {\n            displayException(error);\n        }\n        options.forcenewitemid = true;\n    }\n\n    // Pass itemid / conversationid.\n    options.itemid = conversation.id;\n\n    // Send to local_ai_manager.\n    let requestresult = await manager.askLocalAiManager('chat', question, contextid, options);\n\n    // Handle errors.\n    if (requestresult.code != 200) {\n        requestresult = await errorHandling(requestresult, question, contextid, options);\n    }\n\n    // Attach copy listener.\n    let copy = document.querySelector('.block_ai_chat_modal .awaitanswer .copy');\n    copy.addEventListener('mousedown', () => {\n        helper.copyToClipboard(copy);\n    });\n\n    // Write back answer.\n    showReply(requestresult.result);\n\n    // Ai is done.\n    aiAtWork = false;\n\n    // Save new question and answer.\n    if (requestresult.code == 200) {\n        saveConversationLocally(question, requestresult.result);\n    }\n\n    // Update userquota.\n    const userquota = document.getElementById('block_ai_chat_userquota');\n    userquota.innerHTML = '';\n    renderUserQuota('#block_ai_chat_userquota', ['chat']);\n};\n\n/**\n * Render reply.\n * @param {string} text\n */\nconst showReply = async(text) => {\n    // Get textblock.\n    let fields = document.querySelectorAll('.block_ai_chat_modal .awaitanswer .text');\n    const field = fields[fields.length - 1];\n    // Render the reply.\n    field.innerHTML = text;\n    field.classList.remove('small');\n\n    // Remove awaitanswer class.\n    let awaitdivs = document.querySelectorAll('.block_ai_chat_modal .awaitanswer');\n    const awaitdiv = awaitdivs[awaitdivs.length - 1];\n    awaitdiv.classList.remove('awaitanswer');\n};\n\nconst showMessages = () => {\n    conversation.messages.forEach((val) => {\n        showMessage(val.message, val.sender);\n    });\n};\n\n/**\n * Show answer from local_ai_manager.\n * @param {*} text\n * @param {*} sender User or Ai\n * @param {*} answer Is answer in history\n */\nconst showMessage = async(text, sender = '', answer = true) => {\n    // Skip if sender is system.\n    if (sender === 'system') {\n        return;\n    }\n    // Imitate bool for message.mustache logic {{#sender}}.\n    if (sender === 'ai') {\n        sender = '';\n    }\n    // Escape chars for immediate rendering.\n    if (!answer) {\n        text = escapeHTML(text);\n    }\n\n    const templateData = {\n        \"sender\": sender,\n        \"content\": text,\n        \"answer\": answer,\n    };\n    // Call the function to load and render our template.\n    const {html, js} = await Templates.renderForPromise('block_ai_chat/message', templateData);\n    Templates.appendNodeContents('.block_ai_chat-output', html, js);\n\n    // Add copy listener for question and reply.\n    helper.attachCopyListenerLast();\n\n    // Scroll the modal content to the bottom.\n    helper.scrollToBottom();\n};\n\n/**\n * Create new / Reset dialog.\n * @param {bool} deleted\n */\nconst newDialog = async(deleted = false) => {\n    if (aiAtWork) {\n        return;\n    }\n    // Add current convo local representation, if not already there.\n    if (allConversations.find(x => x.id === conversation.id) === undefined && !deleted) {\n        allConversations.push(conversation);\n    }\n    // Reset local conservation.\n    conversation = {\n        id: 0,\n        messages: [],\n    };\n    clearMessages();\n    setModalHeader(strNewDialog);\n    helper.focustextarea();\n};\n\n/**\n * Delete /hide current dialog.\n */\nconst deleteCurrentDialog = () => {\n    deleteCancelPromise(\n        getString('delete', 'block_ai_chat'),\n        getString('deletewarning', 'block_ai_chat'),\n    ).then(async() => {\n        if (conversation.id !== 0) {\n            try {\n                const deleted = await externalServices.deleteConversation(contextid, userid, conversation.id);\n                if (deleted) {\n                    removeFromHistory();\n                    showConversation();\n                }\n            } catch (error) {\n                displayException(error);\n            }\n        }\n        return;\n    }).catch(() => {\n        return;\n    });\n};\n\n/**\n * Show conversation history.\n */\nconst showHistory = async() => {\n    // Add current convo local representation, if not already there.\n    if (allConversations.find(x => x.id === conversation.id) === undefined) {\n        allConversations.push(conversation);\n    }\n    // Change title and add backlink.\n    let title = '<a href=\"#\" id=\"block_ai_chat_backlink\"><i class=\"icon fa fa-arrow-left\"></i>' + strHistory + '</a>';\n    clearMessages(true);\n    setModalHeader(title);\n    const btnBacklink = document.getElementById('block_ai_chat_backlink');\n    btnBacklink.addEventListener('click', () => {\n        if (conversation.id !== 0) {\n            showConversation(conversation.id);\n        } else {\n            newDialog();\n        }\n        clearMessages();\n        setModalHeader();\n    });\n\n    // Set modal class to hide info about ratelimits and infobox.\n    let modal = document.querySelector('.block_ai_chat_modal');\n    modal.classList.add('onhistorypage');\n\n    // Iterate over conversations and group by date.\n    let groupedByDate = {};\n    allConversations.forEach((convo) => {\n        if (typeof convo.messages[1] !== 'undefined') {\n            // Get first prompt.\n            let title = convo.messages[1].message;\n\n            // Get date and sort convos into a date array.\n            const now = new Date();\n            const date = new Date(convo.timecreated * 1000);\n            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            const yesterday = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);\n            const twoWeeksAgo = new Date(now);\n            twoWeeksAgo.setDate(now.getDate() - 14);\n\n            const options = {weekday: 'long', day: '2-digit', month: '2-digit'};\n            const monthOptions = {month: 'long', year: '2-digit'};\n\n            // Create a date string.\n            let dateString = '';\n            if (date >= today) {\n                dateString = strToday;\n            } else if (date >= yesterday) {\n                dateString = strYesterday;\n            } else if (date >= twoWeeksAgo) {\n                dateString = date.toLocaleDateString(undefined, options);\n            } else {\n                dateString = date.toLocaleDateString(undefined, monthOptions);\n            }\n\n            // Create a time string.\n            const hours = date.getHours();\n            const minutes = date.getMinutes().toString().padStart(2, '0');\n\n            let convItem = {\n                \"title\": title,\n                \"conversationid\": convo.id,\n                \"time\": hours + ':' + minutes,\n            };\n\n            // Save entry under the date.\n            if (!groupedByDate[dateString]) {\n                groupedByDate[dateString] = [];\n            }\n            groupedByDate[dateString].push(convItem);\n        }\n    });\n\n    // Convert the grouped objects into an array format that Mustache can iterate over.\n    let convert = {\n        groups: Object.keys(groupedByDate).map(key => ({\n            key: key,\n            objects: groupedByDate[key]\n        }))\n    };\n\n    // Render history.\n    const templateData = {\n        \"dates\": convert.groups,\n    };\n    const {html, js} = await Templates.renderForPromise('block_ai_chat/history', templateData);\n    Templates.appendNodeContents('.block_ai_chat_modal .block_ai_chat-output', html, js);\n\n    // Add a listener for the new dialog button.\n    const btnNewDialog = document.getElementById('ai_chat_history_new_dialog');\n    btnNewDialog.addEventListener('mousedown', () => {\n        newDialog();\n    });\n};\n\n/**\n * Remove currrent conversation from history.\n */\nconst removeFromHistory = () => {\n    // Cant remove if new or not yet in history.\n    if (conversation.id !== 0 && allConversations.find(x => x.id === conversation.id) !== undefined) {\n        // Build new allConversations array without deleted one.\n        allConversations = allConversations.filter(obj => obj.id !== conversation.id);\n    }\n};\n\n/**\n * Webservice Save conversation.\n * @param {*} question\n * @param {*} reply\n */\nconst saveConversationLocally = (question, reply) => {\n    // Add to local representation.\n    let message = {'message': question, 'sender': 'user'};\n    conversation.messages.push(message);\n    message = {'message': reply, 'sender': 'ai'};\n    conversation.messages.push(message);\n};\n\n/**\n * Clear output div.\n * @param {*} hideinput\n */\nconst clearMessages = (hideinput = false) => {\n    const output = document.querySelector('.block_ai_chat-output');\n    output.innerHTML = '';\n    // For showing history.\n    let input = document.querySelector('.block_ai_chat-input');\n    if (hideinput) {\n        input.style.display = 'none';\n    } else {\n        input.style.display = 'flex';\n    }\n};\n\n/**\n * Set modal header title.\n * @param {*} setTitle\n */\nconst setModalHeader = (setTitle = '') => {\n    let modalheader = document.querySelector('.block_ai_chat_modal .modal-title div');\n    let title = '';\n    if (modalheader !== null && (conversation.messages.length > 0 || setTitle.length)) {\n        if (!setTitle.length) {\n            title = conversation.messages[1].message;\n        } else {\n            title = setTitle;\n        }\n        modalheader.innerHTML = title;\n    }\n    // Remove onhistorypage, since history page is setting it.\n    let modal = document.querySelector('.block_ai_chat_modal');\n    modal.classList.remove('onhistorypage');\n};\n\n/**\n * Attach event listener.\n * @param {*} textarea\n */\nconst addTextareaListener = (textarea) => {\n    textarea.addEventListener('keydown', (event) => {\n        // Handle submission.\n        textareaOnKeydown(event);\n\n        // Handle autgrow.\n        // Reset the height to auto to get the correct scrollHeight.\n        textarea.style.height = 'auto';\n\n        // Fetch the computed styles.\n        const computedStyles = window.getComputedStyle(textarea);\n        const lineHeight = parseFloat(computedStyles.lineHeight);\n        const paddingTop = parseFloat(computedStyles.paddingTop);\n        const paddingBottom = parseFloat(computedStyles.paddingBottom);\n        const borderTop = parseFloat(computedStyles.borderTopWidth);\n        const borderBottom = parseFloat(computedStyles.borderBottomWidth);\n\n        // Calculate the maximum height for four rows plus padding and borders.\n        const maxHeight = (lineHeight * 4) + paddingTop + paddingBottom + borderTop + borderBottom;\n\n        // Calculate the new height based on the scrollHeight.\n        const newHeight = Math.min(textarea.scrollHeight + borderTop + borderBottom, maxHeight);\n\n        // Set the new height.\n        textarea.style.height = newHeight + 'px';\n    });\n};\n\n/**\n * Action for textarea submission.\n * @param {*} event\n */\nconst textareaOnKeydown = (event) => {\n    if (event.key === 'Enter' && !aiAtWork && !event.shiftKey) {\n        aiAtWork = true;\n        enterQuestion(event.target.value);\n        event.preventDefault();\n        event.target.value = '';\n    }\n};\n\n/**\n * Submit form.\n */\nconst clickSubmitButton = () => {\n    // Var aiAtWork to make it impossible to submit multiple questions at once.\n    if (!aiAtWork) {\n        aiAtWork = true;\n        const textarea = document.getElementById('block_ai_chat-input-id');\n        enterQuestion(textarea.value);\n        textarea.value = '';\n    }\n};\n\n/**\n * Handle error from local_ai_manager.\n * @param {*} requestresult\n * @param {*} question\n * @param {*} contextid\n * @param {*} options\n * @returns {object}\n */\nconst errorHandling = async(requestresult, question, contextid, options) => {\n\n    // If code 409, conversationid is already taken, try get new a one.\n    if (requestresult.code == 409) {\n        while (requestresult.code == 409) {\n            try {\n                let idresult = await externalServices.getNewConversationId(contextid);\n                conversation.id = idresult.id;\n                options.itemid = conversation.id;\n            } catch (error) {\n                displayException(error);\n            }\n            // Retry with new id.\n            requestresult = await manager.askLocalAiManager('chat', question, contextid, options);\n            return requestresult;\n        }\n    }\n\n    // If any other errorcode, alert with errormessage.\n    const errorString = await getString('errorwithcode', 'block_ai_chat', requestresult.code);\n    const result = JSON.parse(requestresult.result);\n    await displayAlert(errorString, result.message);\n\n    // Change answer styling to differentiate from ai.\n    const answerdivs = document.querySelectorAll('.awaitanswer');\n    const answerdiv = answerdivs[answerdivs.length - 1];\n    const messagediv = answerdiv.closest('.message');\n    messagediv.classList.add('text-danger');\n\n    // And write generic error message in chatbot.\n    requestresult.result = await getString('error', 'block_ai_chat');\n    return requestresult;\n};\n\n/**\n * Check historic messages for max length.\n * @param {array} messages\n * @returns {array}\n */\nconst checkMessageHistoryLengthLimit = async(messages) => {\n    const length = messages.length;\n    if (length > maxHistory) {\n        // Cut history.\n        let shortenedMessages = [messages[0], ...messages.slice(-maxHistory)];\n\n        // Show warning once per session.\n        if (!maxHistoryWarnings.has(conversation.id)) {\n            const maxHistoryString = await getString('maxhistory', 'block_ai_chat', maxHistory);\n            const warningErrorString = await getString('maxhistoryreached', 'block_ai_chat', maxHistory);\n            await displayAlert(maxHistoryString, warningErrorString);\n            // Remember warning.\n            maxHistoryWarnings.add(conversation.id);\n        }\n        return shortenedMessages;\n    }\n    // Limit not reached, return messages.\n    return messages;\n};\n\n/**\n * Check if modal should close on outside click.\n * @param {*} event\n */\nconst checkOutsideClick = (event) => {\n    // View openfull acts like a normal modal.\n    if (viewmode != VIEW_OPENFULL) {\n        event.preventDefault();\n    }\n};\n\n/**\n * Set different viewmodes and save in local storage.\n * @param {string} mode\n */\nconst setView = async(mode = '') => {\n    const key = await hash('chatmode' + userid);\n    // Check for saved viewmode.\n    let savedmode = LocalStorage.get(key);\n    if (mode == '') {\n        if (!savedmode) {\n            // Set default.\n            mode = VIEW_CHATWINDOW;\n        } else {\n            mode = savedmode;\n        }\n    }\n    // Save viewmode and set global var.\n    LocalStorage.set(key, mode);\n    viewmode = mode;\n\n    // Set viewmode as bodyclass.\n    const body = document.querySelector('body');\n    body.classList.remove(VIEW_CHATWINDOW, VIEW_OPENFULL, VIEW_DOCKRIGHT);\n    body.classList.add(mode);\n};\n\n/**\n * Is user allowed new queries.\n * @returns {message}\n */\nconst userAllowed = async() => {\n    let message;\n    if (tenantConfig.tenantenabled === false) {\n        message = await getString('error_http403disabled', 'local_ai_manager');\n        return message;\n    }\n    if (tenantConfig.userconfirmed === false) {\n        message = await getString('error_http403notconfirmed', 'local_ai_manager');\n        message += \". \";\n        const link = window.location.origin + '/local/ai_manager/confirm_ai_usage.php';\n        message += await getString('confirm_ai_usage', 'block_ai_chat', link);\n        return message;\n    }\n    if (tenantConfig.userlocked === true) {\n        message = await getString('error_http403blocked', 'local_ai_manager');\n        return message;\n    }\n    if (chatConfig.isconfigured === false) {\n        message = await getString('error_purposenotconfigured', 'local_ai_manager');\n        return message;\n    }\n    if (chatConfig.lockedforrole === true) {\n        message = await getString('error_http403blocked', 'local_ai_manager');\n        return message;\n    }\n    if (chatConfig.limitreached === true) {\n        message = await getString('error_limitreached', 'local_ai_manager');\n        return message;\n    }\n    return '';\n};\n\n/**\n * Change to openfull view when screen is small.\n * @param {*} e\n */\nconst handleScreenWidthChange = (e) => {\n    const body = document.querySelector('body');\n    if (e.matches) {\n        // Screen width is less than 576px\n        body.classList.remove(VIEW_CHATWINDOW, VIEW_OPENFULL, VIEW_DOCKRIGHT);\n        body.classList.add(VIEW_OPENFULL);\n    } else {\n        body.classList.remove(VIEW_CHATWINDOW, VIEW_OPENFULL, VIEW_DOCKRIGHT);\n        body.classList.add(viewmode);\n    }\n};\n\n/**\n * Show personas modal.\n */\nconst showPersonasModal = () => {\n    // Add a dynamic form to add a systemprompt/persona to a block instance.\n    // Always create the dynamic form modal, since it is being destroyed.\n    personaForm = new ModalForm({\n        formClass: \"block_ai_chat\\\\form\\\\persona_form\",\n        moduleName: \"block_ai_chat/modal_save_delete_cancel\",\n        args: {\n            contextid: contextid,\n        },\n        modalConfig: {\n            title: strDefinePersona,\n        },\n    });\n\n    // Show modal.\n    personaForm.show();\n\n    // If select[template] is changed, change textarea[prompt].\n    // For this, we want to get the value of the hidden input with name=\"prompts\".\n    // So we wait for the modalForm() to be LOADED to get the modal object.\n    // On the modal object we wait for the bodyRendered event to read the input.\n    personaForm.addEventListener(personaForm.events.LOADED, () => {\n        personaForm.modal.getRoot().on(ModalEvents.bodyRendered, () => {\n            const inputprompts = document.querySelector('input[name=\"prompts\"]');\n            const prompts = JSON.parse(inputprompts.value);\n            const select = document.querySelector('select[name=\"template\"]');\n            const addpersona = document.querySelector('#add_persona');\n            const copypersona = document.querySelector('#copy_persona');\n            personaNewname = document.querySelector('input[name=\"name\"]');\n            personaInputprompt = document.querySelector('textarea[name=\"prompt\"]');\n            personaUserinfo = document.querySelector('textarea[name=\"userinfo\"]');\n            const inputtemplateids = document.querySelector('input[name=\"templateids\"]');\n            const templateids = JSON.parse(inputtemplateids.value);\n            const inputuserinfos = document.querySelector('input[name=\"userinfos\"]');\n            const userinfos = JSON.parse(inputuserinfos.value);\n            personaButtondelete = document.querySelector('[data-custom=\"delete\"]');\n\n            // Disable delete/name on system templates.\n            manageInputs(false, templateids, select.value);\n\n            // Now we can add a listener to reflect select[template] to textarea[prompt].\n            select.addEventListener('change', (event) => {\n                let selectValue = event.target.value;\n                let selectText = event.target.options[select.selectedIndex].text;\n\n                // Enable all.\n                manageInputs(true);\n\n                // Reflect prompt, name and userinfos.\n                if (typeof prompts[selectValue] !== 'undefined') {\n                    personaInputprompt.value = prompts[selectValue];\n                    // For personaNewname, get_formdata needs setAttribute,\n                    // but .value is used to repopulate after placeholder is used.\n                    personaNewname.value = selectText;\n                    personaNewname.setAttribute('placeholder', '');\n                    personaNewname.setAttribute('value', selectText);\n                    personaUserinfo.value = userinfos[selectValue];\n                    personaUserinfo.disabled = false;\n                    personaInputprompt.disabled = false;\n                } else {\n                    // Should be selection \"No Persona\"\n                    personaNewname.setAttribute('value', '');\n                    personaInputprompt.value = '';\n                    personaInputprompt.disabled = true;\n                    personaUserinfo.value = '';\n                    personaUserinfo.disabled = true;\n                }\n                // Disable delete/name on system templates.\n                manageInputs(false, templateids, selectValue);\n            });\n\n            // Remove newpersona signifier option on click.\n            select.addEventListener('click', () => {\n                let option = document.querySelector('.new-persona-placeholder');\n                if (option) {\n                    select.removeChild(option);\n                }\n            });\n\n            // Add headlines and spacing to the template select element.\n            // But before adding options make a comparison to check for usertemplates.\n            const useroptions = select.options.length > templateids.length;\n            // Add spacing after \"No persona\".\n            const spacer = new Option('', '', false, false);\n            spacer.disabled = true;\n            spacer.classList.add('select-spacer');\n            select.insertBefore(spacer, select.options[1]);\n            // Add systemtemplates heading.\n            const systemtemplates = new Option(strSystemTemplates, '', false, false);\n            systemtemplates.disabled = true;\n            select.insertBefore(systemtemplates, select.options[2]);\n            // // Add usertemplates heading.\n            if (useroptions) {\n                // Get last systemtemplate position\n                const maxValue = Math.max(...templateids.map(Number));\n                const lastSystemOption = Array.from(select.options).find(opt => Number(opt.value) === maxValue);\n                // Add heading.\n                const usertemplates = new Option(strUserTemplates, '', false, false);\n                usertemplates.disabled = true;\n                select.insertBefore(usertemplates, lastSystemOption.nextSibling);\n            }\n\n            // Add listener to addPersona icon.\n            addpersona.addEventListener('click', () => {\n                addPersona(false, select);\n            });\n\n            // Add listener to copyPersona icon.\n            copypersona.addEventListener('click', () => {\n                addPersona(true, select);\n            });\n\n            // To use process_dynamic_submission() for deletion, we use a save button but add a delete hidden input.\n            // Make sure it is set 1 on deletion and to 0 on actual saving process.\n            const actionbuttons = document.querySelectorAll('[data-action=\"save\"]');\n            actionbuttons.forEach((button) => {\n                button.addEventListener('click', (e) => {\n                    const deleteinput = document.querySelector('input[name=\"delete\"]');\n                    if (e.target.dataset.custom == 'delete') {\n                        deleteinput.value = '1';\n                    } else {\n                        deleteinput.value = '0';\n                    }\n                });\n            });\n        });\n    });\n\n    // Enable admintemplate name input on save.\n    personaForm.addEventListener(personaForm.events.SUBMIT_BUTTON_PRESSED, () => {\n        manageInputs(true);\n    });\n\n\n    // Also enable admintemplate name input on error.\n    personaForm.addEventListener(personaForm.events.SERVER_VALIDATION_ERROR, () => {\n        manageInputs(true);\n    });\n\n    // Reload persona on submission.\n    personaForm.addEventListener(personaForm.events.FORM_SUBMITTED, async() => {\n        let reply = await externalServices.reloadPersona(contextid);\n        personaPrompt = reply.prompt;\n        personaInfo = reply.info;\n    });\n};\n\n\n/**\n * Show options modal.\n */\nconst showOptionsModal = () => {\n    // Add a dynamic form to add options.\n    // Always create the dynamic form modal, since it is being destroyed.\n    optionsForm = new ModalForm({\n        formClass: \"block_ai_chat\\\\form\\\\options_form\",\n        moduleName: \"core/modal_save_cancel\",\n        args: {\n            contextid: contextid,\n        },\n        modalConfig: {\n            title: getString('options'),\n        },\n    });\n\n    // Show modal.\n    optionsForm.show();\n};\n\n/**\n * Click on add new persona, make input writable and reset if no copy.\n * @param {bool} copy\n * @param {HTMLElement} select\n */\nconst addPersona = (copy, select) => {\n    // Enable inputs and set a placeholder.\n    personaNewname.disabled = false;\n    personaNewname.placeholder = strNewPersona;\n    personaNewname.value = '';\n    personaInputprompt.disabled = false;\n    personaUserinfo.disabled = false;\n    if (!copy) {\n        personaInputprompt.value = '';\n        personaUserinfo.value = '';\n    }\n    // Add option to signify new persona.\n    let option = document.querySelector('.new-persona-placeholder');\n    if (!option) {\n        let signifierOption = new Option(strNewPersona, '', true, true);\n        signifierOption.classList.add('new-persona-placeholder');\n        select.add(signifierOption);\n    }\n};\n\nconst manageInputs = (switchon, templateids = [], selectValue = 42) => {\n    // Switch all inputs on.\n    if (switchon) {\n        personaNewname.disabled = false;\n        personaButtondelete.disabled = false;\n        personaInputprompt.disabled = false;\n        personaUserinfo.disabled = false;\n        return;\n    }\n    // Abort on reload if validation failed.\n    if (document.querySelector('.is-invalid') !== null) {\n        return;\n    }\n    // Switch input between admin and user templates.\n    if (templateids.includes(selectValue) || selectValue == 0) {\n        personaNewname.disabled = true;\n        personaButtondelete.disabled = true;\n        personaInputprompt.disabled = true;\n        personaUserinfo.disabled = true;\n    } else {\n        personaNewname.disabled = false;\n        personaButtondelete.disabled = false;\n        personaInputprompt.disabled = false;\n        personaUserinfo.disabled = false;\n    }\n};\n"],"names":["VIEW_CHATWINDOW","VIEW_OPENFULL","VIEW_DOCKRIGHT","strHistory","strNewDialog","strToday","strYesterday","strDefinePersona","strNewPersona","strUserTemplates","strSystemTemplates","badge","viewmode","modal","personaForm","personaPrompt","personaInfo","personaLink","personaNewname","personaButtondelete","personaUserinfo","personaInputprompt","showPersona","optionsForm","showOptions","modalopen","conversation","id","messages","allConversations","userid","contextid","firstLoad","aiAtWork","maxHistory","maxHistoryWarnings","Set","tenantConfig","chatConfig","DialogModal","Modal","configure","modalConfig","show","removeOnClose","isVerticallyCentered","titletest","setTitletest","value","hide","document","querySelector","classList","remove","async","params","new","history","persona","newpersona","usertemplates","systemtemplates","personaprompt","personainfo","showpersona","showoptions","personalink","aiConfig","purposes","find","p","purpose","create","templateContext","title","getRoot","on","e","target","add","ModalEvents","outsideClick","event","checkOutsideClick","setView","getElementById","addEventListener","textarea","addTextareaListener","clickSubmitButton","getConversations","showConversation","reply","externalServices","getConversationcontextLimit","limit","newDialog","deleteCurrentDialog","showHistory","btnDefinePersona","showPersonasModal","btnOptions","showOptionsModal","targetElement","html","js","Templates","renderForPromise","appendNodeContents","message","userAllowed","notice","aiUtilsButton","uniqid","Math","random","toString","slice","TinyAiUtils","init","TinyAiConstants","modalModes","standalone","selectionObject","window","getSelection","range","getRangeAt","container","createElement","appendChild","cloneContents","images","querySelectorAll","length","src","image","fetchResult","fetch","data","blob","getDatamanager","setSelectionImg","setSelection","editorUtils","TinyAiEditorUtils","setEditorUtils","displayDialogue","helper","focustextarea","showModal","matchMedia","handleScreenWidthChange","innerWidth","getAllConversations","error","x","at","clearMessages","setModalHeader","showMessages","enterQuestion","question","showMessage","options","checkMessageHistoryLengthLimit","idresult","getNewConversationId","timecreated","floor","Date","now","forcenewitemid","itemid","requestresult","manager","askLocalAiManager","code","errorHandling","copy","copyToClipboard","showReply","result","saveConversationLocally","innerHTML","fields","field","text","awaitdivs","forEach","val","sender","answer","templateData","attachCopyListenerLast","scrollToBottom","deleted","undefined","push","then","deleteConversation","removeFromHistory","catch","groupedByDate","convo","date","today","getFullYear","getMonth","getDate","yesterday","twoWeeksAgo","setDate","weekday","day","month","monthOptions","year","dateString","toLocaleDateString","hours","getHours","minutes","getMinutes","padStart","convItem","groups","Object","keys","map","key","objects","filter","obj","hideinput","output","input","style","display","setTitle","modalheader","textareaOnKeydown","height","computedStyles","getComputedStyle","lineHeight","parseFloat","paddingTop","paddingBottom","borderTop","borderTopWidth","borderBottom","borderBottomWidth","maxHeight","newHeight","min","scrollHeight","shiftKey","preventDefault","errorString","JSON","parse","answerdivs","closest","shortenedMessages","has","maxHistoryString","warningErrorString","mode","savedmode","LocalStorage","get","set","body","tenantenabled","userconfirmed","link","location","origin","userlocked","isconfigured","lockedforrole","limitreached","matches","ModalForm","formClass","moduleName","args","events","LOADED","bodyRendered","inputprompts","prompts","select","addpersona","copypersona","inputtemplateids","templateids","inputuserinfos","userinfos","manageInputs","selectValue","selectText","selectedIndex","setAttribute","disabled","option","removeChild","useroptions","spacer","Option","insertBefore","maxValue","max","Number","lastSystemOption","Array","from","opt","nextSibling","addPersona","button","deleteinput","dataset","custom","SUBMIT_BUTTON_PRESSED","SERVER_VALIDATION_ERROR","FORM_SUBMITTED","reloadPersona","prompt","info","placeholder","signifierOption","switchon","includes"],"mappings":"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"}