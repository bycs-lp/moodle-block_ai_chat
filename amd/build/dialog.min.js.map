{"version":3,"file":"dialog.min.js","sources":["../src/dialog.js"],"sourcesContent":["import DialogModal from 'block_ai_interface/dialog_modal';\nimport * as externalServices from 'block_ai_interface/webservices';\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport { getNewConversationId } from './webservices';\n\n// Declare variables.\n// Modal.\nlet modal = {};\nlet modaltitle = '';\n\n// Current conversation.\nlet conversation = {\n    id: 0,\n    messages: [],\n};\n// All conversations.\nlet allConversations = [];\n// Userid.\nlet userid = 0;\n// Course context id.\nlet contextid = 0;\n// First load.\nlet firstLoad = true;\n\nexport const init = async(params) => {\n    userid = params.userid;\n    contextid = params.contextid;\n    modaltitle = params.title;\n\n    // Build modal.\n    modal = await DialogModal.create({\n        templateContext: {\n            title: modaltitle,\n            // history: history, // history dynamically added.\n        },\n    });\n\n    // Add class for styling when modal is displayed.\n    modal.getRoot().on('modal:shown', function(e) {\n        e.target.classList.add(\"ai_interface_modal\");\n        e.target.scrollTo(0, e.target.scrollHeight);\n    });\n\n    // Load conversations.\n    await getConversations();\n\n    // Attach listener to the ai button to call modal.\n    let button = document.getElementById(\"ai_interface_button\");\n    button.addEventListener('mousedown', function() {\n        showModal(params);\n    });\n};\n\n/**\n * Show ai_interface modal.\n */\nasync function showModal() {\n\n    // Show modal.\n    await modal.show();\n\n    // Add listener for input submission.\n    const textarea = document.getElementById('block_ai_interface-input-id');\n    addTextareaListener(textarea);\n\n    if (firstLoad) {\n        // Show conversation.\n        // Todo - Evtl. noch firstload verschönern, spinner für header und content z.b.\n        showConversation();\n\n        // Add history to dropdownmenu.\n        addToHistory(allConversations);\n\n        // Add listeners for dropdownmenu.\n        const btnNewDialog = document.getElementById('block_ai_interface_new_dialog');\n        btnNewDialog.addEventListener('mousedown', () => {\n            newDialog();\n        });\n        const btnDeleteDialog = document.getElementById('block_ai_interface_delete_dialog');\n        btnDeleteDialog.addEventListener('click', () => {\n            deleteCurrentDialog();\n        });\n        firstLoad = false;\n    }\n\n    focustextarea();\n}\n\n/**\n * Send input to ai connector.\n * @param {*} question\n */\nconst enterQuestion = async(question) => {\n\n    // Remove listener, so another question cant be triggered.\n    const textarea = document.getElementById('block_ai_interface-input-id');\n    textarea.removeEventListener('keydown', textareaOnKeydown);\n\n    // Deny changing dialogs until answer present?\n\n    // Add to conversation, answer not yet available.\n    showMessage(question, 'self', false);\n\n    // For first message, add a system message.\n    if (conversation.messages.length === 0) {\n        conversation.messages.push({\n            'message': 'Answer in german',\n            'sender': 'system',\n        });\n    }\n\n    // Options, with conversation history.\n    const options = {\n        'component': 'block_ai_interface',\n        'contextid': contextid,\n        'conversationcontext': conversation.messages,\n    };\n\n    // For a new conversation, get an id.\n    if (conversation.id === 0) {\n        try {\n            let idresult = await externalServices.getNewConversationId(contextid);\n            conversation.id = idresult.id;\n        } catch (error) {\n            displayException(error);\n        }\n        options.forcenewitemid = true;\n    }\n    options.itemid = conversation.id;\n\n\n    // Send to local_ai_manager.\n    let requestresult = await askLocalAiManager('chat', question, options);\n    // If code 409, conversationid is already taken, get new one.\n    while (requestresult.code == 409) {\n        // Todo test, sleep and falsify db entry so error is triggered and a new id is given.\n        try {\n            let idresult = await externalServices.getNewConversationId(contextid);\n            conversation.id = idresult.id;\n            options.itemid = conversation.id;\n        } catch (error) {\n            displayException(error);\n        }\n        // Retry with new id.\n        requestresult = await askLocalAiManager('chat', question, options);\n    }\n\n    if (requestresult.code != 200) {\n        // Requestresult errorhandling.\n        errorHandling();\n        return;\n    }\n\n    // Write back answer.\n    showReply(requestresult.result);\n\n    // Attach copy listener.\n    let copy = document.querySelector('.ai_interface_modal .awaitanswer .copy');\n    copyToClipboard(copy);\n\n    // Save new question and answer.\n    saveConversationLocally(question, requestresult.result);\n\n    // Readd textarea listener.\n    addTextareaListener(textarea);\n};\n\n/**\n * Render reply.\n * @param {string} text\n */\nconst showReply = (text) => {\n    let field = document.querySelector('.ai_interface_modal .awaitanswer .text div');\n    field.replaceWith(text);\n};\n\n/**\n * Create new / Reset dialog.\n */\nconst newDialog = (deleted = false) => {\n    console.log(\"newDialog called\");\n    // Add current convo to history and local representation, if not already there.\n    if (allConversations.find(x => x.id === conversation.id) === undefined && !deleted) {\n        addToHistory([conversation]);\n        allConversations.push(conversation);\n    }\n    // Reset local conservation.\n    conversation = {\n        id: 0,\n        messages: [],\n    };\n    clearMessages();\n    setModalHeader(true);\n};\n\n/**\n * Delete /hide current dialog.\n */\nconst deleteCurrentDialog = async() => {\n    console.log(\"deleteCurrentDialog called\");\n    if (conversation.id !== 0) {\n        try {\n            const deleted = await externalServices.deleteConversation(contextid, userid, conversation.id);\n            if (deleted) {\n                removeFromHistory();\n                showConversation();\n                // newDialog(true);\n            }\n        } catch (error) {\n            displayException(error);\n        }\n    }\n};\n\n/**\n * Get the async answer from the local_ai_manager.\n *\n * @param {string} purpose\n * @param {string} prompt\n * @param {array} options\n * @returns {string}\n */\nconst askLocalAiManager = async(purpose, prompt, options = []) => {\n    let result;\n    try {\n        result = await makeRequest(purpose, prompt, JSON.stringify(options));\n    } catch (error) {\n        displayException(error);\n    }\n    return result;\n};\n\nconst showMessages = () => {\n    console.log(\"showMessages called\");\n    conversation.messages.forEach((val) => {\n        showMessage(val.message, val.sender);\n    });\n};\n\n/**\n * Show answer from local_ai_manager.\n * @param {*} text\n * @param {*} sender User or Ai\n * @param {*} answer Is answer in history\n */\nconst showMessage = async(text, sender = '', answer = true) => {\n    // Skip if sender is system.\n    if (sender === 'system') {\n        return;\n    }\n    // Imitate bool for message.mustache logic {{#sender}}.\n    if (sender === 'ai') {\n        sender = '';\n    }\n    const templateData = {\n        \"sender\": sender,\n        \"content\": text,\n        \"answer\": answer,\n    };\n    // Call the function to load and render our template.\n    const {html, js} = await Templates.renderForPromise('block_ai_interface/message', templateData);\n    Templates.appendNodeContents('.block_ai_interface-output', html, js);\n\n    // Scroll the modal content to the bottom.\n    scrollToBottom();\n};\n\n/**\n * Clear output div.\n */\nconst clearMessages = () => {\n    console.log(\"clearMessages called\");\n    const output = document.querySelector('.block_ai_interface-output');\n    output.innerHTML = '';\n};\n\n/**\n * Webservice Get all conversations.\n */\nconst getConversations = async() => {\n    console.log(\"allConversations called\");\n    try {\n        // Ist hier await nötig um in init auf den Button listener zu warten?\n        allConversations = await externalServices.getAllConversations(userid, contextid);\n    } catch (error) {\n        displayException(error);\n    }\n};\n\n/**\n * Add conversations to history.\n * @param {*} convos Conversations\n */\nconst addToHistory = (convos) => {\n    convos.forEach(async(convo) => {\n        // Conditionally shorten menu title, skip system message.\n        let title = convo.messages[1].message;\n        if (convo.messages[1].message.length > 50) {\n            title = convo.messages[1].message.substring(0, 50);\n            title += ' ...';\n        }\n\n        // Add entry in menu.\n        const templateData = {\n            \"title\": title,\n            \"conversationid\": convo.id,\n        };\n\n        const {html, js} = await Templates.renderForPromise('block_ai_interface/dropdownmenuitem', templateData);\n        Templates.appendNodeContents('.block_ai_interface_action_menu .dropdown-menu', html, js);\n\n        // If we add only one item, it is a new item and should be on top of history.\n        if (convos.length === 1) {\n            console.log(\"move item to top called\");\n            // Make sure elements are in place to be worked with.\n            const dropdown = document.querySelector('.block_ai_interface_action_menu .dropdown-menu');\n            // Select the last element.\n            const lastItem = dropdown.lastElementChild;\n            // Get the reference element for the third position.\n            const thirdChild = dropdown.children[2];\n            // Remove the last item from its current position.\n            dropdown.removeChild(lastItem);\n            // Insert the last item at the new position (before the third child).\n            dropdown.insertBefore(lastItem, thirdChild);                \n        }\n    });\n\n    // If we have more than 9 items, add scrollbar to menu.\n    if (convos.length > 9) {\n        const dropdown = document.querySelector('.block_ai_interface_action_menu .dropdown-menu');\n        dropdown.classList.add(\"addscroll\");\n    }\n};\n\n/**\n * Remove currrent conversation from history.\n */\nconst removeFromHistory = () => {\n    if (conversation.id !== 0) {\n        // Remove from dropdown.\n        const element = document.querySelector('.block_ai_interface_action_menu [data-id=\"' + conversation.id + '\"]');\n        element.remove();\n        // Remove from allConversations array.\n        console.log(allConversations);\n        allConversations = allConversations.filter(obj => obj.id !== conversation.id);\n        console.log(allConversations);\n    }\n};\n\n/**\n * Function to set conversation.\n * @param {*} id\n */\nconst showConversation = (id = 0) => {\n    // Change conversation or get last conversation.\n    console.log(\"showConversation called\");\n    if (id !== 0) {\n        conversation = allConversations.find(x => x.id === id);\n    } else if (typeof allConversations[0] !== 'undefined') {\n        console.log(\"last item allconv\");\n        conversation = allConversations.at(0);\n    }\n    clearMessages();\n    showMessages();\n    setModalHeader();\n    attachCopyListener();\n};\n// Make globally accessible since it is used to show history in dropdownmenuitem.mustache.\ndocument.showConversation = showConversation;\n\n/**\n * Webservice Save conversation.\n * @param {*} question\n * @param {*} reply\n */\nconst saveConversationLocally = (question, reply) => {\n    // Add to local representation.\n    let message = {'message': question, 'sender': 'user'};\n    conversation.messages.push(message);\n    message = {'message': reply, 'sender': 'ai'};\n    conversation.messages.push(message);\n};\n\n/**\n * Set modal header title.\n * @param {*} empty\n */\nconst setModalHeader = (empty = false) => {\n    let modalheader = document.querySelector('.ai_interface_modal .modal-title div');\n    if (modalheader !== null && (conversation.messages.length > 0 || empty)) {\n        let title = '';\n        if (!empty) {\n            title = ' - ' + conversation.messages[1].message;\n            if (conversation.messages[1].message.length > 50) {\n                title = ' - ' + conversation.messages[1].message.substring(0, 50);\n                title += ' ...';\n            }\n        }\n        modalheader.innerHTML = modaltitle + title;\n    }\n};\n\n/**\n * Focus textarea.\n */\nconst focustextarea = () => {\n    // To set focus multiple times, focus has to be reset.\n    const rand = document.getElementsByTagName('input');\n    rand[0].focus();\n    const textarea = document.getElementById('block_ai_interface-input-id');\n    textarea.focus();\n\n};\n\n/**\n * Scroll to bottom of modal body.\n */\nconst scrollToBottom = () => {\n    console.log(\"scroll to bottom called\");\n    const modalContent = document.querySelector('.ai_interface_modal .modal-body');\n    modalContent.scrollTop = modalContent.scrollHeight;\n};\n\n/**\n * Attach event listener.\n * @param {*} textarea\n */\nconst addTextareaListener = (textarea) => {\n    textarea.addEventListener('keydown', textareaOnKeydown);\n};\n\n/**\n * Action for textarea submission.\n * @param {*} event\n */\nconst textareaOnKeydown = (event) => {\n    // TODO check for mobile devices.\n    if (event.key === 'Enter') {\n        enterQuestion(event.target.value);\n        event.preventDefault();\n        event.target.value = '';\n    }\n};\n\n/**\n * Attach copy listener to all elements.\n */\nconst attachCopyListener = () => {\n    const elements = document.querySelectorAll(\".ai_interface_modal .copy\");\n    elements.forEach((element) => {\n        element.addEventListener('mousedown', function() {\n            copyToClipboard(element);\n        });\n    });\n}\n\n/**\n * Copy ai reply to clipboard.\n * @param {*} element\n */\nconst copyToClipboard = (element) => {\n\n    // Find the adjacent text container.\n    const textElement = element.nextElementSibling;\n\n    // Get the text content.\n    const textToCopy = textElement.innerText || textElement.textContent;\n\n    // Copy to clipboard using the Clipboard API.\n    navigator.clipboard.writeText(textToCopy);\n};\n\nconst errorHandling = (code) => {\n    // Replace spinner with error message.\n\n}"],"names":["modal","modaltitle","conversation","id","messages","allConversations","userid","contextid","firstLoad","async","params","title","DialogModal","create","templateContext","getRoot","on","e","target","classList","add","scrollTo","scrollHeight","getConversations","document","getElementById","addEventListener","show","textarea","addTextareaListener","showConversation","addToHistory","newDialog","deleteCurrentDialog","focustextarea","showModal","showReply","text","querySelector","replaceWith","deleted","console","log","undefined","find","x","push","clearMessages","setModalHeader","externalServices","deleteConversation","removeFromHistory","error","askLocalAiManager","purpose","prompt","result","options","JSON","stringify","showMessages","forEach","val","showMessage","message","sender","answer","templateData","html","js","Templates","renderForPromise","appendNodeContents","scrollToBottom","innerHTML","getAllConversations","convos","convo","length","substring","dropdown","lastItem","lastElementChild","thirdChild","children","removeChild","insertBefore","remove","filter","obj","at","attachCopyListener","saveConversationLocally","question","reply","empty","modalheader","getElementsByTagName","focus","modalContent","scrollTop","textareaOnKeydown","event","key","removeEventListener","idresult","getNewConversationId","forcenewitemid","itemid","requestresult","code","errorHandling","copy","copyToClipboard","enterQuestion","value","preventDefault","querySelectorAll","element","textElement","nextElementSibling","textToCopy","innerText","textContent","navigator","clipboard","writeText"],"mappings":"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"}