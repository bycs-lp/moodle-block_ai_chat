{"version":3,"file":"dialog.min.js","sources":["../src/dialog.js"],"sourcesContent":["import Modal from 'core/modal';\nimport * as externalServices from 'block_ai_chat/webservices';\nimport Templates from 'core/templates';\nimport {alert as displayAlert, exception as displayException, deleteCancelPromise} from 'core/notification';\nimport ModalEvents from 'core/modal_events';\nimport * as helper from 'block_ai_chat/helper';\nimport * as manager from 'block_ai_chat/ai_manager';\nimport {getString} from 'core/str';\nimport {marked} from 'block_ai_chat/vendor/marked.esm';\nimport {renderInfoBox, hash} from 'local_ai_manager/render_infobox';\nimport {renderUserQuota} from 'local_ai_manager/userquota';\nimport {getAiConfig} from 'local_ai_manager/config';\nimport LocalStorage from 'core/localstorage';\nimport { escapeHTML } from './helper';\n\n// Declare variables.\nconst VIEW_CHATWINDOW = 'block_ai_chat_chatwindow';\nconst VIEW_OPENFULL = 'block_ai_chat_openfull';\nconst VIEW_DOCKRIGHT = 'block_ai_chat_dockright';\nconst MODAL_OPEN = 'block_ai_chat_open';\n\n// Modal.\nlet modal = {};\nlet strHistory;\nlet strNewDialog;\nlet strToday;\nlet strYesterday;\nlet badge;\nlet viewmode;\nlet modalopen = false;\n\n// Current conversation.\nlet conversation = {\n    id: 0,\n    messages: [],\n};\n// All conversations.\nlet allConversations = [];\n// Userid.\nlet userid = 0;\n// Course context id.\nlet contextid = 0;\n// First load.\nlet firstLoad = true;\n// AI in process of answering.\nlet aiAtWork = false;\n// Maximum history included in query.\nlet maxHistory = 5;\n// Remember warnings for maximum history in this session.\nlet maxHistoryWarnings = new Set();\n// Tenantconfig.\nlet tenantConfig = {};\nlet chatConfig = {};\n\nclass DialogModal extends Modal {\n    static TYPE = \"block_ai_chat/dialog_modal\";\n    static TEMPLATE = \"block_ai_chat/dialog_modal\";\n\n    configure(modalConfig) {\n        // Show this modal on instantiation.\n        modalConfig.show = false;\n\n        // Remove from the DOM on close.\n        modalConfig.removeOnClose = false;\n\n        modalConfig.isVerticallyCentered = false;\n        // returnFocus: target,\n\n        super.configure(modalConfig);\n\n        // Accept our own custom arguments too.\n        if (modalConfig.titletest) {\n            this.setTitletest(modalConfig.titletest);\n        }\n    }\n\n    setTitletest(value) {\n        this.titletest = value;\n    }\n\n    hide() {\n        super.hide();\n        // Keep track of state, to restrict changes to block_ai_chat modal.\n        modalopen = false;\n        const body = document.querySelector('body');\n        body.classList.remove(MODAL_OPEN);\n    }\n}\n\nexport const init = async(params) => {\n    // Read params.\n    userid = params.userid;\n    contextid = params.contextid;\n    strNewDialog = params.new;\n    strHistory = params.history;\n    badge = params.badge;\n    // Disable bdage.\n    badge = false;\n\n    // Get configuration.\n    const aiConfig = await getAiConfig();\n    tenantConfig = aiConfig;\n    chatConfig = aiConfig.purposes.find(p => p.purpose === \"chat\");\n\n    // Build modal.\n    modal = await DialogModal.create({\n        templateContext: {\n            title: strNewDialog,\n            badge: badge,\n            // history: history, // history dynamically added.\n        },\n    });\n\n    // Add class for styling when modal is displayed.\n    modal.getRoot().on('modal:shown', function(e) {\n        e.target.classList.add(\"ai_chat_modal\");\n    });\n\n    // Conditionally prevent outside click event.\n    modal.getRoot().on(ModalEvents.outsideClick, event => {\n        checkOutsideClick(event);\n    });\n\n    // Check and set viewmode.\n    setView();\n\n    // Get conversationcontext message limit.\n    let conversationcontextLimit = await externalServices.getConversationcontextLimit(contextid);\n    maxHistory = conversationcontextLimit.limit;\n\n    // Attach listener to the ai button to call modal.\n    let button = document.getElementById('ai_chat_button');\n    button.addEventListener('mousedown', async() => {\n        showModal(params);\n    });\n\n    // Get strings.\n    strToday = await getString('today', 'core');\n    strYesterday = await getString('yesterday', 'block_ai_chat');\n\n    // Create a MediaQueryList object to check for small screens.\n    const mediaQuery = window.matchMedia(\"(max-width: 576px)\");\n\n    // Attach the event listener to handle changes.\n    mediaQuery.addEventListener('change', handleScreenWidthChange);\n\n    // Initial check for screenwidth.\n    if (window.innerWidth <= 576) {\n        setView(VIEW_OPENFULL);\n    }\n};\n\n/**\n * Show ai_chat modal.\n */\nasync function showModal() {\n    // Switch for repeated clicking.\n    if (modalopen) {\n        modal.hide();\n        return;\n    }\n\n    // Show modal.\n    await modal.show();\n    modalopen = true;\n    const body = document.querySelector('body');\n    body.classList.add(MODAL_OPEN);\n\n    // Add listener for input submission.\n    const textarea = document.getElementById('block_ai_chat-input-id');\n    addTextareaListener(textarea);\n    const button = document.getElementById('block_ai_chat-submit-id');\n    button.addEventListener(\"click\", (event) => {\n        clickSubmitButton(event);\n    });\n\n    if (firstLoad) {\n        // Load conversations.\n        await getConversations();\n\n        // Show conversation.\n        // Todo - Evtl. noch firstload verschönern, spinner für header und content z.b.\n        showConversation();\n\n        // Add listeners for dropdownmenus.\n        // Actions.\n        const btnNewDialog = document.getElementById('block_ai_chat_new_dialog');\n        btnNewDialog.addEventListener('click', () => {\n            newDialog();\n        });\n        const btnDeleteDialog = document.getElementById('block_ai_chat_delete_dialog');\n        btnDeleteDialog.addEventListener('click', () => {\n            deleteCurrentDialog();\n        });\n        const btnShowHistory = document.getElementById('block_ai_chat_show_history');\n        btnShowHistory.addEventListener('click', () => {\n            showHistory();\n        });\n        // Views.\n        const btnChatwindow = document.getElementById(VIEW_CHATWINDOW);\n        btnChatwindow.addEventListener('click', () => {\n            setView(VIEW_CHATWINDOW);\n        });\n        const btnFullWidth = document.getElementById(VIEW_OPENFULL);\n        btnFullWidth.addEventListener('click', () => {\n            setView(VIEW_OPENFULL);\n        });\n        const btnDockRight = document.getElementById(VIEW_DOCKRIGHT);\n        btnDockRight.addEventListener('click', () => {\n            setView(VIEW_DOCKRIGHT);\n        });\n\n        // Show userquota.\n        await renderUserQuota('#block_ai_chat_userquota', ['chat']);\n        // Show infobox.\n        await renderInfoBox('block_ai_chat', userid, '.ai_chat_modal_body [data-content=\"local_ai_manager_infobox\"]');\n\n        firstLoad = false;\n    }\n\n    helper.focustextarea();\n}\n\n\n/**\n * Webservice Get all conversations.\n */\nconst getConversations = async() => {\n    console.log(\"allConversations called\");\n    try {\n        allConversations = await externalServices.getAllConversations(userid, contextid);\n        console.log(allConversations);\n    } catch (error) {\n        console.log(allConversations);\n        displayException(error);\n    }\n};\n\n/**\n * Function to set conversation.\n * @param {*} id\n */\nconst showConversation = (id = 0) => {\n    console.log(\"showConversation called\");\n    // Dissallow changing conversations when question running.\n    if (aiAtWork) {\n        return;\n    }\n    // Change conversation or get last conversation.\n    if (id !== 0) {\n        // Set selected conversation.\n        conversation = allConversations.find(x => x.id === id);\n    } else if (typeof allConversations[0] !== 'undefined') {\n        // Set last conversation.\n        conversation = allConversations.at(allConversations.length - 1);\n    } else if (allConversations.length === 0) {\n        // Last conversation has been deleted.\n        newDialog(true);\n    }\n    clearMessages();\n    setModalHeader();\n    showMessages();\n};\n// Make globally accessible since it is used to show history in dropdownmenuitem.mustache.\ndocument.showConversation = showConversation;\n\n\n/**\n * Send input to ai connector.\n * @param {*} question\n */\nconst enterQuestion = async(question) => {\n\n    // Deny changing dialogs until answer present?\n    if (question == '') {\n        aiAtWork = false;\n        return;\n    }\n\n    if (!userAllowed()) {\n        console.log(\"User not allowed\");\n        const notice = await getString('notice', 'block_ai_chat');\n        const message = await getString('noticenewquestion', 'block_ai_chat');\n        await displayAlert(notice, message);\n        aiAtWork = false;\n        return;\n    }\n\n    // Escape problematic chars.\n    question = escapeHTML(question);\n\n    // Add to conversation, answer not yet available.\n    showMessage(question, 'self', false);\n\n    // For first message, add a system message.\n    if (conversation.messages.length === 0) {\n        conversation.messages.push({\n            'message': 'Answer in german',\n            'sender': 'system',\n        });\n    }\n\n    // Ceck history for length limit.\n    const convHistory = await checkMessageHistoryLengthLimit(conversation.messages);\n\n    // Options, with conversation history.\n    const options = {\n        'component': 'block_ai_chat',\n        'contextid': contextid,\n        'conversationcontext': convHistory,\n    };\n\n    // For a new conversation, get an id.\n    if (conversation.id === 0) {\n        try {\n            let idresult = await externalServices.getNewConversationId(contextid);\n            conversation.id = idresult.id;\n            conversation.timecreated = Math.floor(Date.now() / 1000);\n            setModalHeader(question);\n        } catch (error) {\n            displayException(error);\n        }\n        options.forcenewitemid = true;\n    }\n\n    // Pass itemid / conversationid.\n    options.itemid = conversation.id;\n\n    // Send to local_ai_manager.\n    let requestresult = await manager.askLocalAiManager('chat', question, options);\n\n    // Handle errors.\n    if (requestresult.code != 200) {\n        requestresult = await errorHandling(requestresult, question, options);\n    }\n\n    // Attach copy listener.\n    let copy = document.querySelector('.ai_chat_modal .awaitanswer .copy');\n    copy.addEventListener('mousedown', () => {\n        helper.copyToClipboard(copy);\n    });\n\n    // Write back answer.\n    showReply(requestresult.result);\n\n    // Ai is done.\n    aiAtWork = false;\n\n    // Save new question and answer.\n    saveConversationLocally(question, requestresult.result);\n\n    // Update userquota.\n    const userquota = document.getElementById('block_ai_chat_userquota');\n    userquota.innerHTML = '';\n    renderUserQuota('#block_ai_chat_userquota', ['chat']);\n};\n\n/**\n * Render reply.\n * @param {string} text\n */\nconst showReply = async (text) => {\n    // Get textblock.\n    let fields = document.querySelectorAll('.ai_chat_modal .awaitanswer .text');\n    const field = fields[fields.length - 1];\n    // Use marked to render the reply.\n    field.innerHTML = marked.parse(text);\n    field.classList.remove('small');\n\n    // Remove awaitanswer class.\n    let awaitdivs = document.querySelectorAll('.ai_chat_modal .awaitanswer');\n    const awaitdiv = awaitdivs[awaitdivs.length - 1];\n    awaitdiv.classList.remove('awaitanswer');\n};\n\nconst showMessages = () => {\n    console.log(\"showMessages called\");\n    conversation.messages.forEach((val) => {\n        showMessage(val.message, val.sender);\n    });\n};\n\n/**\n * Show answer from local_ai_manager.\n * @param {*} text\n * @param {*} sender User or Ai\n * @param {*} answer Is answer in history\n */\nconst showMessage = async(text, sender = '', answer = true) => {\n    // Skip if sender is system.\n    if (sender === 'system') {\n        return;\n    }\n    // Imitate bool for message.mustache logic {{#sender}}.\n    if (sender === 'ai') {\n        sender = '';\n    }\n    const content = marked.parse(text);\n\n    const templateData = {\n        \"sender\": sender,\n        \"content\": content,\n        \"answer\": answer,\n    };\n    // Call the function to load and render our template.\n    const {html, js} = await Templates.renderForPromise('block_ai_chat/message', templateData);\n    Templates.appendNodeContents('.block_ai_chat-output', html, js);\n\n    // Add copy listener for replys.\n    if (sender === '') {\n        helper.attachCopyListenerLast();\n    }\n\n    // Scroll the modal content to the bottom.\n    helper.scrollToBottom();\n};\n\n/**\n * Create new / Reset dialog.\n * @param {bool} deleted\n */\nconst newDialog = async(deleted = false) => {\n    console.log(\"newDialog called\");\n    if (aiAtWork) {\n        return;\n    }\n    if (!userAllowed()) {\n        const notice = await getString('notice', 'block_ai_chat');\n        const message = await getString('noticenewconversation', 'block_ai_chat');\n        await displayAlert(notice, message);\n        aiAtWork = false;\n        return;\n    }\n    // Add current convo local representation, if not already there.\n    if (allConversations.find(x => x.id === conversation.id) === undefined && !deleted) {\n        allConversations.push(conversation);\n    }\n    // Reset local conservation.\n    conversation = {\n        id: 0,\n        messages: [],\n    };\n    clearMessages();\n    setModalHeader(strNewDialog);\n};\n\n/**\n * Delete /hide current dialog.\n */\nconst deleteCurrentDialog = () => {\n    console.log(\"deleteCurrentDialog called\");\n    deleteCancelPromise(\n        getString('delete', 'block_ai_chat'),\n        getString('deletewarning', 'block_ai_chat'),\n    ).then(async() => {\n        if (conversation.id !== 0) {\n            try {\n                const deleted = await externalServices.deleteConversation(contextid, userid, conversation.id);\n                if (deleted) {\n                    removeFromHistory();\n                    showConversation();\n                }\n            } catch (error) {\n                displayException(error);\n            }\n        }\n        return;\n    }).catch(() => {\n        return;\n    });\n};\n\n/**\n * Show conversation history.\n */\nconst showHistory = async() => {\n    console.log(\"showHistory called\");\n    // Add current convo local representation, if not already there.\n    if (allConversations.find(x => x.id === conversation.id) === undefined) {\n        allConversations.push(conversation);\n    }\n    // Change title and add backlink.\n    let title = '<a href=\"#\" id=\"block_ai_chat_backlink\"><i class=\"icon fa fa-arrow-left\"></i>' + strHistory + '</a>';\n    clearMessages(true);\n    setModalHeader(title);\n    const btnBacklink = document.getElementById('block_ai_chat_backlink');\n    btnBacklink.addEventListener('click', () => {\n        if (conversation.id !== 0) {\n            showConversation(conversation.id);\n        } else {\n            newDialog();\n        }\n        clearMessages();\n        setModalHeader();\n    });\n\n    // Set modal class to hide info about ratelimits and infobox.\n    let modal = document.querySelector('.ai_chat_modal');\n    modal.classList.add('onhistorypage');\n\n    // Iterate over conversations and group by date.\n    let groupedByDate = {};\n    allConversations.forEach((convo) => {\n        if (typeof convo.messages[1] !== 'undefined') {\n            // Get first prompt.\n            let title = convo.messages[1].message;\n\n            // Get date and sort convos into a date array.\n            const now = new Date();\n            const date = new Date(convo.timecreated * 1000);\n            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            const yesterday = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);\n            const twoWeeksAgo = new Date(now);\n            twoWeeksAgo.setDate(now.getDate() - 14);\n\n            const options = {weekday: 'long', day: '2-digit', month: '2-digit'};\n            const monthOptions = {month: 'long', year: '2-digit'};\n\n            // Create a date string.\n            let dateString = '';\n            if (date >= today) {\n                dateString = strToday;\n            } else if (date >= yesterday) {\n                dateString = strYesterday;\n            } else if (date >= twoWeeksAgo) {\n                dateString = date.toLocaleDateString(undefined, options);\n            } else {\n                dateString = date.toLocaleDateString(undefined, monthOptions);\n            }\n\n            // Create a time string.\n            const hours = date.getHours();\n            const minutes = date.getMinutes().toString().padStart(2, '0');\n\n            let convItem = {\n                \"title\": title,\n                \"conversationid\": convo.id,\n                \"time\": hours + ':' + minutes,\n            };\n\n            // Save entry under the date.\n            if (!groupedByDate[dateString]) {\n                groupedByDate[dateString] = [];\n            }\n            groupedByDate[dateString].push(convItem);\n        }\n    });\n\n    // Convert the grouped objects into an array format that Mustache can iterate over.\n    let convert = {\n        groups: Object.keys(groupedByDate).map(key => ({\n            key: key,\n            objects: groupedByDate[key]\n        }))\n    };\n\n    // Render history.\n    const templateData = {\n        \"dates\": convert.groups,\n    };\n    const {html, js} = await Templates.renderForPromise('block_ai_chat/history', templateData);\n    Templates.appendNodeContents('.ai_chat_modal .block_ai_chat-output', html, js);\n\n    // Add a listener for the new dialog button.\n    const btnNewDialog = document.getElementById('ai_chat_history_new_dialog');\n    btnNewDialog.addEventListener('mousedown', () => {\n        newDialog();\n    });\n};\n\n/**\n * Remove currrent conversation from history.\n */\nconst removeFromHistory = () => {\n    // Cant remove if new or not yet in history.\n    if (conversation.id !== 0 && allConversations.find(x => x.id === conversation.id) !== undefined) {\n        // Build new allConversations array without deleted one.\n        allConversations = allConversations.filter(obj => obj.id !== conversation.id);\n    }\n};\n\n/**\n * Webservice Save conversation.\n * @param {*} question\n * @param {*} reply\n */\nconst saveConversationLocally = (question, reply) => {\n    // Add to local representation.\n    let message = {'message': question, 'sender': 'user'};\n    conversation.messages.push(message);\n    message = {'message': reply, 'sender': 'ai'};\n    conversation.messages.push(message);\n};\n\n/**\n * Clear output div.\n * @param {*} hideinput\n */\nconst clearMessages = (hideinput = false) => {\n    console.log(\"clearMessages called\");\n    const output = document.querySelector('.block_ai_chat-output');\n    output.innerHTML = '';\n    // For showing history.\n    let input = document.querySelector('.block_ai_chat-input');\n    if (hideinput) {\n        input.style.display = 'none';\n    } else {\n        input.style.display = 'flex';\n    }\n};\n\n/**\n * Set modal header title.\n * @param {*} setTitle\n */\nconst setModalHeader = (setTitle = '') => {\n    let modalheader = document.querySelector('.ai_chat_modal .modal-title div');\n    let title = '';\n    if (modalheader !== null && (conversation.messages.length > 0 || setTitle.length)) {\n        if (!setTitle.length) {\n            title = conversation.messages[1].message;\n        } else {\n            title = setTitle;\n        }\n        modalheader.innerHTML = title;\n    }\n    // Remove onhistorypage, since history page is setting it.\n    let modal = document.querySelector('.ai_chat_modal');\n    modal.classList.remove('onhistorypage');\n};\n\n/**\n * Attach event listener.\n * @param {*} textarea\n */\nconst addTextareaListener = (textarea) => {\n    textarea.addEventListener('keydown', (event) => {\n        // Handle submission.\n        textareaOnKeydown(event);\n\n        // Handle autgrow.\n        // Reset the height to auto to get the correct scrollHeight.\n        textarea.style.height = 'auto';\n\n        // Fetch the computed styles.\n        const computedStyles = window.getComputedStyle(textarea);\n        const lineHeight = parseFloat(computedStyles.lineHeight);\n        const paddingTop = parseFloat(computedStyles.paddingTop);\n        const paddingBottom = parseFloat(computedStyles.paddingBottom);\n        const borderTop = parseFloat(computedStyles.borderTopWidth);\n        const borderBottom = parseFloat(computedStyles.borderBottomWidth);\n\n        // Calculate the maximum height for four rows plus padding and borders.\n        const maxHeight = (lineHeight * 4) + paddingTop + paddingBottom + borderTop + borderBottom;\n\n        // Calculate the new height based on the scrollHeight.\n        const newHeight = Math.min(textarea.scrollHeight + borderTop + borderBottom, maxHeight);\n\n        // Set the new height.\n        textarea.style.height = newHeight + 'px';\n    });\n};\n\n/**\n * Action for textarea submission.\n * @param {*} event\n */\nconst textareaOnKeydown = (event) => {\n    // TODO check for mobile devices.\n    if (event.key === 'Enter' && !aiAtWork && !event.shiftKey) {\n        aiAtWork = true;\n        enterQuestion(event.target.value);\n        event.preventDefault();\n        event.target.value = '';\n    }\n};\n\n/**\n * Submit form.\n */\nconst clickSubmitButton = () => {\n    // Var aiAtWork to make it impossible to submit multiple questions at once.\n    if (!aiAtWork) {\n        aiAtWork = true;\n        const textarea = document.getElementById('block_ai_chat-input-id');\n        enterQuestion(textarea.value);\n        textarea.value = '';\n    }\n};\n\n/**\n * Handle error from local_ai_manager.\n * @param {*} requestresult\n * @param {*} question\n * @param {*} options\n * @returns {object}\n */\nconst errorHandling = async(requestresult, question, options) => {\n\n    // If code 409, conversationid is already taken, try get new a one.\n    if (requestresult.code == 409) {\n        while (requestresult.code == 409) {\n            try {\n                let idresult = await externalServices.getNewConversationId(contextid);\n                conversation.id = idresult.id;\n                options.itemid = conversation.id;\n            } catch (error) {\n                displayException(error);\n            }\n            // Retry with new id.\n            requestresult = await manager.askLocalAiManager('chat', question, options);\n            return requestresult;\n        }\n    }\n\n    // If any other errorcode, alert with errormessage.\n    const errorString = await getString('errorwithcode', 'block_ai_chat', requestresult.code);\n    const result = JSON.parse(requestresult.result);\n    await displayAlert(errorString, result.message);\n\n    // Change answer styling to differentiate from ai.\n    const answerdivs = document.querySelectorAll('.awaitanswer');\n    const answerdiv = answerdivs[answerdivs.length - 1];\n    const messagediv = answerdiv.closest('.message');\n    messagediv.classList.add('text-danger');\n\n    // And write generic error message in chatbot.\n    requestresult.result = await getString('error', 'block_ai_chat');\n    console.log(requestresult);\n    return requestresult;\n};\n\n/**\n * Check historic messages for max length.\n * @param {array} messages\n * @returns {array}\n */\nconst checkMessageHistoryLengthLimit = async(messages) => {\n    const length = messages.length;\n    console.log(\"checkHistoryLengthLimit called\");\n    if (length > maxHistory) {\n        // Cut history.\n        let shortenedMessages = [messages[0], ...messages.slice(-maxHistory)];\n        console.log(shortenedMessages);\n\n        // Show warning once per session.\n        if (!maxHistoryWarnings.has(conversation.id)) {\n            const maxHistoryString = await getString('maxhistory', 'block_ai_chat', maxHistory);\n            const warningErrorString = await getString('maxhistoryreached', 'block_ai_chat', maxHistory);\n            await displayAlert(maxHistoryString, warningErrorString);\n            // Remember warning.\n            maxHistoryWarnings.add(conversation.id);\n        }\n        return shortenedMessages;\n    }\n    // Limit not reached, return messages.\n    return messages;\n};\n\n/**\n * Check if modal should close on outside click.\n * @param {*} event\n */\nconst checkOutsideClick = (event) => {\n    // View openfull acts like a normal modal.\n    if (viewmode != VIEW_OPENFULL) {\n        event.preventDefault();\n    }\n};\n\n/**\n * Set different viewmodes and save in local storage.\n * @param {string} mode\n */\nconst setView = async(mode = '') => {\n    const key = await hash('chatmode' + userid);\n    // Check for saved viewmode.\n    let savedmode = LocalStorage.get(key);\n    if (mode == '') {\n        if (!savedmode) {\n            // Set default.\n            mode = VIEW_CHATWINDOW;\n        } else {\n            mode = savedmode;\n        }\n    }\n    // Save viewmode and set global var.\n    LocalStorage.set(key, mode);\n    viewmode = mode;\n\n    // Set viewmode as bodyclass.\n    const body = document.querySelector('body');\n    body.classList.remove(VIEW_CHATWINDOW, VIEW_OPENFULL, VIEW_DOCKRIGHT);\n    body.classList.add(mode);\n};\n\n/**\n * Is user allowed new queries.\n * @returns {bool}\n */\nconst userAllowed = () => {\n    if (tenantConfig.tenantenabled === false || tenantConfig.userlocked === true) {\n        return false;\n    }\n\n    if (chatConfig.isconfigured === false ||\n        chatConfig.lockedforrole === true ||\n        chatConfig.limitreached === true\n    ) {\n        return false;\n    }\n    return true;\n};\n\n/**\n * Change to openfull view when screen is small.\n * @param {*} e\n */\nconst handleScreenWidthChange = (e) => {\n    const body = document.querySelector('body');\n    if (e.matches) {\n        // Screen width is less than 576px\n        body.classList.remove(VIEW_CHATWINDOW, VIEW_OPENFULL, VIEW_DOCKRIGHT);\n        body.classList.add(VIEW_OPENFULL);\n    } else {\n        body.classList.remove(VIEW_CHATWINDOW, VIEW_OPENFULL, VIEW_DOCKRIGHT);\n        body.classList.add(viewmode);\n    }\n};\n"],"names":["VIEW_CHATWINDOW","VIEW_OPENFULL","VIEW_DOCKRIGHT","strHistory","strNewDialog","strToday","strYesterday","badge","viewmode","modal","modalopen","conversation","id","messages","allConversations","userid","contextid","firstLoad","aiAtWork","maxHistory","maxHistoryWarnings","Set","tenantConfig","chatConfig","DialogModal","Modal","configure","modalConfig","show","removeOnClose","isVerticallyCentered","titletest","setTitletest","value","hide","document","querySelector","classList","remove","async","params","new","history","aiConfig","purposes","find","p","purpose","create","templateContext","title","getRoot","on","e","target","add","ModalEvents","outsideClick","event","checkOutsideClick","setView","conversationcontextLimit","externalServices","getConversationcontextLimit","limit","getElementById","addEventListener","textarea","addTextareaListener","clickSubmitButton","getConversations","showConversation","newDialog","deleteCurrentDialog","showHistory","helper","focustextarea","showModal","window","matchMedia","handleScreenWidthChange","innerWidth","console","log","getAllConversations","error","x","at","length","clearMessages","setModalHeader","showMessages","enterQuestion","question","userAllowed","notice","message","showMessage","push","convHistory","checkMessageHistoryLengthLimit","options","idresult","getNewConversationId","timecreated","Math","floor","Date","now","forcenewitemid","itemid","requestresult","manager","askLocalAiManager","code","errorHandling","copy","copyToClipboard","showReply","result","saveConversationLocally","innerHTML","fields","querySelectorAll","field","marked","parse","text","awaitdivs","forEach","val","sender","answer","content","templateData","html","js","Templates","renderForPromise","appendNodeContents","attachCopyListenerLast","scrollToBottom","deleted","undefined","then","deleteConversation","removeFromHistory","catch","groupedByDate","convo","date","today","getFullYear","getMonth","getDate","yesterday","twoWeeksAgo","setDate","weekday","day","month","monthOptions","year","dateString","toLocaleDateString","hours","getHours","minutes","getMinutes","toString","padStart","convItem","groups","Object","keys","map","key","objects","filter","obj","reply","hideinput","output","input","style","display","setTitle","modalheader","textareaOnKeydown","height","computedStyles","getComputedStyle","lineHeight","parseFloat","paddingTop","paddingBottom","borderTop","borderTopWidth","borderBottom","borderBottomWidth","maxHeight","newHeight","min","scrollHeight","shiftKey","preventDefault","errorString","JSON","answerdivs","closest","shortenedMessages","slice","has","maxHistoryString","warningErrorString","mode","savedmode","LocalStorage","get","set","body","tenantenabled","userlocked","isconfigured","lockedforrole","limitreached","matches"],"mappings":"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"}