{"version":3,"file":"dialog.min.js","sources":["../src/dialog.js"],"sourcesContent":["import Modal from 'core/modal';\nimport * as externalServices from 'block_ai_chat/webservices';\nimport Templates from 'core/templates';\nimport {alert, exception as displayException} from 'core/notification';\nimport ModalEvents from 'core/modal_events';\nimport * as helper from 'block_ai_chat/helper';\nimport * as manager from 'block_ai_chat/ai_manager';\nimport {getString} from 'core/str';\nimport {marked} from 'block_ai_chat/vendor/marked.esm';\nimport {renderInfoBox, hash} from 'local_ai_manager/render_infobox';\nimport {renderUserQuota} from 'local_ai_manager/userquota';\nimport {getAiConfig} from 'local_ai_manager/config';\nimport LocalStorage from 'core/localstorage';\n\n// Declare variables.\nconst VIEW_CHATWINDOW = 'block_ai_chat_chatwindow';\nconst VIEW_OPENFULL = 'block_ai_chat_openfull';\nconst VIEW_DOCKRIGHT = 'block_ai_chat_dockright';\nconst MODAL_OPEN = 'block_ai_chat_open';\n\n// Modal.\nlet modal = {};\nlet strHistory;\nlet strNewDialog;\nlet strToday;\nlet strYesterday;\nlet badge;\nlet viewmode;\nlet modalopen = false;\n\n// Current conversation.\nlet conversation = {\n    id: 0,\n    messages: [],\n};\n// All conversations.\nlet allConversations = [];\n// Userid.\nlet userid = 0;\n// Course context id.\nlet contextid = 0;\n// First load.\nlet firstLoad = true;\n// AI in process of answering.\nlet aiAtWork = false;\n// Maximum history included in query.\nlet maxHistory = 5;\n// Remember warnings for maximum history in this session.\nlet maxHistoryWarnings = new Set();\n// Tenantconfig.\nlet tenantConfig = {};\nlet chatConfig = {};\n\nclass DialogModal extends Modal {\n    static TYPE = \"block_ai_chat/dialog_modal\";\n    static TEMPLATE = \"block_ai_chat/dialog_modal\";\n\n    configure(modalConfig) {\n        // Show this modal on instantiation.\n        modalConfig.show = false;\n\n        // Remove from the DOM on close.\n        modalConfig.removeOnClose = false;\n\n        modalConfig.isVerticallyCentered = false;\n        // returnFocus: target,\n\n        super.configure(modalConfig);\n\n        // Accept our own custom arguments too.\n        if (modalConfig.titletest) {\n            this.setTitletest(modalConfig.titletest);\n        }\n    }\n\n    setTitletest(value) {\n        this.titletest = value;\n    }\n\n    hide() {\n        super.hide();\n        // Keep track of state, to restrict changes to block_ai_chat modal.\n        modalopen = false;\n        const body = document.querySelector('body');\n        body.classList.remove(MODAL_OPEN);\n    }\n}\n\nexport const init = async(params) => {\n    // Read params.\n    userid = params.userid;\n    contextid = params.contextid;\n    strNewDialog = params.new;\n    strHistory = params.history;\n    badge = params.badge;\n\n    // Get configuration.\n    const aiConfig = await getAiConfig();\n    tenantConfig = aiConfig;\n    chatConfig = aiConfig.purposes.find(p => p.purpose === \"chat\");\n\n    // Build modal.\n    modal = await DialogModal.create({\n        templateContext: {\n            title: strNewDialog,\n            badge: badge,\n            // history: history, // history dynamically added.\n        },\n    });\n\n    // Add class for styling when modal is displayed.\n    modal.getRoot().on('modal:shown', function(e) {\n        e.target.classList.add(\"ai_chat_modal\");\n    });\n\n    // Conditionally prevent outside click event.\n    modal.getRoot().on(ModalEvents.outsideClick, event => {\n        checkOutsideClick(event);\n    });\n\n    // Load conversations.\n    await getConversations();\n\n    // Check and set viewmode.\n    setView();\n\n    // Get conversationcontext message limit.\n    let conversationcontextLimit = await externalServices.getConversationcontextLimit(contextid);\n    maxHistory = conversationcontextLimit.limit;\n\n    // Attach listener to the ai button to call modal.\n    let button = document.getElementById('ai_chat_button');\n    button.addEventListener('mousedown', async() => {\n        showModal(params);\n        await renderInfoBox('block_ai_chat', userid, '.ai_chat_modal_body [data-content=\"local_ai_manager_infobox\"]');\n    });\n\n    // Get strings.\n    strToday = await getString('today', 'core');\n    strYesterday = await getString('yesterday', 'block_ai_chat');\n};\n\n/**\n * Show ai_chat modal.\n */\nasync function showModal() {\n    // Switch for repeated clicking.\n    if (modalopen) {\n        modal.hide();\n        return;\n    }\n\n    // Show modal.\n    await modal.show();\n    modalopen = true;\n    const body = document.querySelector('body');\n    body.classList.add(MODAL_OPEN);\n\n    // Add listener for input submission.\n    const textarea = document.getElementById('block_ai_chat-input-id');\n    addTextareaListener(textarea);\n    const button = document.getElementById('block_ai_chat-submit-id');\n    button.addEventListener(\"click\", (event) => {\n        clickSubmitButton(event);\n    });\n\n    if (firstLoad) {\n        // Show conversation.\n        // Todo - Evtl. noch firstload verschönern, spinner für header und content z.b.\n        showConversation();\n\n        // Add listeners for dropdownmenus.\n        // Actions.\n        const btnNewDialog = document.getElementById('block_ai_chat_new_dialog');\n        btnNewDialog.addEventListener('click', () => {\n            newDialog();\n        });\n        const btnDeleteDialog = document.getElementById('block_ai_chat_delete_dialog');\n        btnDeleteDialog.addEventListener('click', () => {\n            deleteCurrentDialog();\n        });\n        const btnShowHistory = document.getElementById('block_ai_chat_show_history');\n        btnShowHistory.addEventListener('click', () => {\n            showHistory();\n        });\n        // Views.\n        const btnChatwindow = document.getElementById(VIEW_CHATWINDOW);\n        btnChatwindow.addEventListener('click', () => {\n            setView(VIEW_CHATWINDOW);\n        });\n        const btnFullWidth = document.getElementById(VIEW_OPENFULL);\n        btnFullWidth.addEventListener('click', () => {\n            setView(VIEW_OPENFULL);\n        });\n        const btnDockRight = document.getElementById(VIEW_DOCKRIGHT);\n        btnDockRight.addEventListener('click', () => {\n            setView(VIEW_DOCKRIGHT);\n        });\n\n        // Show userquota.\n        renderUserQuota('#block_ai_chat_userquota', ['chat']);\n\n        firstLoad = false;\n    }\n\n    helper.focustextarea();\n}\n\n\n/**\n * Webservice Get all conversations.\n */\nconst getConversations = async() => {\n    console.log(\"allConversations called\");\n    try {\n        // Ist hier await nötig um in init auf den Button listener zu warten?\n        allConversations = await externalServices.getAllConversations(userid, contextid);\n    } catch (error) {\n        displayException(error);\n    }\n};\n\n/**\n * Function to set conversation.\n * @param {*} id\n */\nconst showConversation = (id = 0) => {\n    console.log(\"showConversation called\");\n    // Dissallow changing conversations when question running.\n    if (aiAtWork) {\n        return;\n    }\n    // Change conversation or get last conversation.\n    if (id !== 0) {\n        // Set selected conversation.\n        conversation = allConversations.find(x => x.id === id);\n    } else if (typeof allConversations[0] !== 'undefined') {\n        // Set last conversation.\n        conversation = allConversations.at(0);\n    } else if (allConversations.length === 0) {\n        // Last conversation has been deleted.\n        newDialog(true);\n    }\n    clearMessages();\n    setModalHeader();\n    showMessages();\n};\n// Make globally accessible since it is used to show history in dropdownmenuitem.mustache.\ndocument.showConversation = showConversation;\n\n\n/**\n * Send input to ai connector.\n * @param {*} question\n */\nconst enterQuestion = async(question) => {\n\n    // Deny changing dialogs until answer present?\n    if (question == '') {\n        aiAtWork = false;\n        return;\n    }\n\n    if (!userAllowed()) {\n        console.log(\"User not allowed\");\n        const notice = await getString('notice', 'block_ai_chat');\n        const message = await getString('noticenewquestion', 'block_ai_chat');\n        await alert(notice, message);\n        aiAtWork = false;\n        return;\n    }\n\n    // Add to conversation, answer not yet available.\n    showMessage(question, 'self', false);\n\n    // For first message, add a system message.\n    if (conversation.messages.length === 0) {\n        conversation.messages.push({\n            'message': 'Answer in german',\n            'sender': 'system',\n        });\n    }\n\n    // Ceck history for length limit.\n    const convHistory = await checkMessageHistoryLengthLimit(conversation.messages);\n\n    // Options, with conversation history.\n    const options = {\n        'component': 'block_ai_chat',\n        'contextid': contextid,\n        'conversationcontext': convHistory,\n    };\n\n    // For a new conversation, get an id.\n    if (conversation.id === 0) {\n        try {\n            let idresult = await externalServices.getNewConversationId(contextid);\n            conversation.id = idresult.id;\n        } catch (error) {\n            displayException(error);\n        }\n        options.forcenewitemid = true;\n    }\n\n    // Pass itemid / conversationid.\n    options.itemid = conversation.id;\n\n    // Send to local_ai_manager.\n    let requestresult = await manager.askLocalAiManager('chat', question, options);\n\n    // Handle errors.\n    if (requestresult.code != 200) {\n        requestresult = await errorHandling(requestresult, question, options);\n    }\n\n    // Write back answer.\n    showReply(requestresult.result);\n\n    // Ai is done.\n    aiAtWork = false;\n\n    // Attach copy listener.\n    let copy = document.querySelector('.ai_chat_modal .awaitanswer .copy');\n    copy.addEventListener('mousedown', () => {\n        helper.copyToClipboard(copy);\n    });\n\n    // Save new question and answer.\n    saveConversationLocally(question, requestresult.result);\n\n    // Update userquota.\n    const userquota = document.getElementById('block_ai_chat_userquota');\n    userquota.innerHTML = '';\n    renderUserQuota('#block_ai_chat_userquota', ['chat']);\n};\n\n/**\n * Render reply.\n * @param {string} text\n */\nconst showReply = async (text) => {\n    let fields = document.querySelectorAll('.ai_chat_modal .awaitanswer .text');\n    const field = fields[fields.length - 1];\n    field.innerHTML = marked.parse(text);\n    field.classList.remove('small');\n};\n\nconst showMessages = () => {\n    console.log(\"showMessages called\");\n    conversation.messages.forEach((val) => {\n        showMessage(val.message, val.sender);\n    });\n};\n\n/**\n * Show answer from local_ai_manager.\n * @param {*} text\n * @param {*} sender User or Ai\n * @param {*} answer Is answer in history\n */\nconst showMessage = async(text, sender = '', answer = true) => {\n    // Skip if sender is system.\n    if (sender === 'system') {\n        return;\n    }\n    // Imitate bool for message.mustache logic {{#sender}}.\n    if (sender === 'ai') {\n        sender = '';\n    }\n    const templateData = {\n        \"sender\": sender,\n        \"content\": marked.parse(text),\n        \"answer\": answer,\n    };\n    // Call the function to load and render our template.\n    const {html, js} = await Templates.renderForPromise('block_ai_chat/message', templateData);\n    Templates.appendNodeContents('.block_ai_chat-output', html, js);\n\n    // Add copy listener for replys.\n    if (sender === '') {\n        helper.attachCopyListenerLast();\n    }\n\n    // Scroll the modal content to the bottom.\n    helper.scrollToBottom();\n};\n\n/**\n * Create new / Reset dialog.\n * @param {bool} deleted\n */\nconst newDialog = async(deleted = false) => {\n    console.log(\"newDialog called\");\n    if (aiAtWork) {\n        return;\n    }\n    if (!userAllowed()) {\n        const notice = await getString('notice', 'block_ai_chat');\n        const message = await getString('noticenewconversation', 'block_ai_chat');\n        await alert(notice, message);\n        aiAtWork = false;\n        return;\n    }\n    // Add current convo local representation, if not already there.\n    if (allConversations.find(x => x.id === conversation.id) === undefined && !deleted) {\n        allConversations.push(conversation);\n    }\n    // Reset local conservation.\n    conversation = {\n        id: 0,\n        messages: [],\n    };\n    clearMessages();\n    setModalHeader(strNewDialog);\n};\n\n/**\n * Delete /hide current dialog.\n */\nconst deleteCurrentDialog = async() => {\n    console.log(\"deleteCurrentDialog called\");\n    if (conversation.id !== 0) {\n        try {\n            const deleted = await externalServices.deleteConversation(contextid, userid, conversation.id);\n            if (deleted) {\n                removeFromHistory();\n                showConversation();\n            }\n        } catch (error) {\n            displayException(error);\n        }\n    }\n};\n\n/**\n * Show conversation history.\n */\nconst showHistory = async() => {\n    console.log(\"showHistory called\");\n    // Change title and add backlink.\n    let title = '<a href=\"#\" id=\"block_ai_chat_backlink\"><i class=\"icon fa fa-arrow-left\"></i>' + strHistory + '</a>';\n    clearMessages(true);\n    setModalHeader(title);\n    const btnBacklink = document.getElementById('block_ai_chat_backlink');\n    btnBacklink.addEventListener('click', () => {\n        showConversation(conversation.id);\n        clearMessages();\n        setModalHeader();\n    });\n\n    // Iterate over conversations and group by date.\n    let groupedByDate = {};\n    allConversations.forEach((convo) => {\n        if (typeof convo.messages[1] !== 'undefined') {\n            // Conditionally shorten menu title, skip system message.\n            let title = convo.messages[1].message;\n            if (convo.messages[1].message.length > 50) {\n                title = convo.messages[1].message.substring(0, 50);\n                title += ' ...';\n            }\n\n            // Get date and sort convos into a date array.\n            const now = new Date();\n            const date = new Date(convo.timecreated * 1000);\n            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            const yesterday = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);\n            const twoWeeksAgo = new Date(now);\n            twoWeeksAgo.setDate(now.getDate() - 14);\n\n            const options = {weekday: 'long', day: '2-digit', month: '2-digit'};\n            const monthOptions = {month: 'long', year: '2-digit'};\n\n            let dateString = '';\n            if (date >= today) {\n                dateString = strToday;\n            } else if (date >= yesterday) {\n                dateString = strYesterday;\n            } else if (date >= twoWeeksAgo) {\n                dateString = date.toLocaleDateString(undefined, options);\n            } else {\n                dateString = date.toLocaleDateString(undefined, monthOptions);\n            }\n            let convItem = {\n                \"title\": title,\n                \"conversationid\": convo.id,\n            };\n\n            // Save entry under the date.\n            if (!groupedByDate[dateString]) {\n                groupedByDate[dateString] = [];\n            }\n            groupedByDate[dateString].push(convItem);\n        }\n    });\n\n    // Convert the grouped objects into an array format that Mustache can iterate over.\n    let convert = {\n        groups: Object.keys(groupedByDate).map(key => ({\n            key: key,\n            objects: groupedByDate[key]\n        }))\n    };\n\n    // Render history.\n    const templateData = {\n        \"dates\": convert.groups,\n    };\n    const {html, js} = await Templates.renderForPromise('block_ai_chat/history', templateData);\n    Templates.appendNodeContents('.ai_chat_modal .block_ai_chat-output', html, js);\n\n    // Add a listener for the new dialog button.\n    const btnNewDialog = document.getElementById('ai_chat_history_new_dialog');\n    btnNewDialog.addEventListener('mousedown', () => {\n        newDialog();\n    });\n};\n\n/**\n * Remove currrent conversation from history.\n */\nconst removeFromHistory = () => {\n    // Cant remove if new or not yet in history.\n    if (conversation.id !== 0 && allConversations.find(x => x.id === conversation.id) !== undefined) {\n        // Build new allConversations array without deleted one.\n        allConversations = allConversations.filter(obj => obj.id !== conversation.id);\n    }\n};\n\n/**\n * Webservice Save conversation.\n * @param {*} question\n * @param {*} reply\n */\nconst saveConversationLocally = (question, reply) => {\n    // Add to local representation.\n    let message = {'message': question, 'sender': 'user'};\n    conversation.messages.push(message);\n    message = {'message': reply, 'sender': 'ai'};\n    conversation.messages.push(message);\n};\n\n/**\n * Clear output div.\n * @param {*} hideinput\n */\nconst clearMessages = (hideinput = false) => {\n    console.log(\"clearMessages called\");\n    const output = document.querySelector('.block_ai_chat-output');\n    output.innerHTML = '';\n    // For showing history.\n    let input = document.querySelector('.block_ai_chat-input');\n    if (hideinput) {\n        input.style.display = 'none';\n    } else {\n        input.style.display = 'flex';\n    }\n};\n\n/**\n * Set modal header title.\n * @param {*} setTitle\n */\nconst setModalHeader = (setTitle = '') => {\n    let modalheader = document.querySelector('.ai_chat_modal .modal-title div');\n    let title = '';\n    if (modalheader !== null && (conversation.messages.length > 0 || setTitle.length)) {\n        if (!setTitle.length) {\n            title = conversation.messages[1].message;\n            if (conversation.messages[1].message.length > 50) {\n                title = conversation.messages[1].message.substring(0, 50);\n                title += ' ...';\n            }\n        } else {\n            title = setTitle;\n        }\n        modalheader.innerHTML = title;\n    }\n};\n\n/**\n * Attach event listener.\n * @param {*} textarea\n */\nconst addTextareaListener = (textarea) => {\n    textarea.addEventListener('keydown', (event) => {\n        // Handle submission.\n        textareaOnKeydown(event);\n\n        // Handle autgrow.\n        // Reset the height to auto to get the correct scrollHeight.\n        textarea.style.height = 'auto';\n\n        // Fetch the computed styles.\n        const computedStyles = window.getComputedStyle(textarea);\n        const lineHeight = parseFloat(computedStyles.lineHeight);\n        const paddingTop = parseFloat(computedStyles.paddingTop);\n        const paddingBottom = parseFloat(computedStyles.paddingBottom);\n        const borderTop = parseFloat(computedStyles.borderTopWidth);\n        const borderBottom = parseFloat(computedStyles.borderBottomWidth);\n\n        // Calculate the maximum height for four rows plus padding and borders.\n        const maxHeight = (lineHeight * 4) + paddingTop + paddingBottom + borderTop + borderBottom;\n\n        // Calculate the new height based on the scrollHeight.\n        const newHeight = Math.min(textarea.scrollHeight + borderTop + borderBottom, maxHeight);\n\n        // Set the new height.\n        textarea.style.height = newHeight + 'px';\n    });\n};\n\n/**\n * Action for textarea submission.\n * @param {*} event\n */\nconst textareaOnKeydown = (event) => {\n    // TODO check for mobile devices.\n    if (event.key === 'Enter' && !aiAtWork && !event.shiftKey) {\n        aiAtWork = true;\n        enterQuestion(event.target.value);\n        event.preventDefault();\n        event.target.value = '';\n    }\n};\n\n/**\n * Submit form.\n */\nconst clickSubmitButton = () => {\n    // Var aiAtWork to make it impossible to submit multiple questions at once.\n    if (!aiAtWork) {\n        aiAtWork = true;\n        const textarea = document.getElementById('block_ai_chat-input-id');\n        enterQuestion(textarea.value);\n        textarea.value = '';\n    }\n};\n\n/**\n * Handle error from local_ai_manager.\n * @param {*} requestresult\n * @param {*} question\n * @param {*} options\n * @returns {object}\n */\nconst errorHandling = async(requestresult, question, options) => {\n\n    // If code 409, conversationid is already taken, try get new a one.\n    if (requestresult.code == 409) {\n        while (requestresult.code == 409) {\n            try {\n                let idresult = await externalServices.getNewConversationId(contextid);\n                conversation.id = idresult.id;\n                options.itemid = conversation.id;\n            } catch (error) {\n                displayException(error);\n            }\n            // Retry with new id.\n            requestresult = await manager.askLocalAiManager('chat', question, options);\n            return requestresult;\n        }\n    }\n\n    // If any other errorcode, alert with errormessage.\n    const errorString = await getString('errorwithcode', 'block_ai_chat', requestresult.code);\n    await alert(errorString, requestresult.result);\n\n    // Change answer styling to differentiate from ai.\n    const answerdivs = document.querySelectorAll('.awaitanswer');\n    const answerdiv = answerdivs[answerdivs.length - 1];\n    const messagediv = answerdiv.closest('.message');\n    messagediv.classList.add('text-danger');\n\n    // And write generic error message in chatbot.\n    requestresult.result = await getString('error', 'block_ai_chat');\n    console.log(requestresult);\n    return requestresult;\n};\n\n/**\n * Check historic messages for max length.\n * @param {array} messages\n * @returns {array}\n */\nconst checkMessageHistoryLengthLimit = async(messages) => {\n    const length = messages.length;\n    console.log(\"checkHistoryLengthLimit called\");\n    if (length > maxHistory) {\n        // Cut history.\n        let shortenedMessages = [messages[0], ...messages.slice(-maxHistory)];\n        console.log(shortenedMessages);\n\n        // Show warning once per session.\n        if (!maxHistoryWarnings.has(conversation.id)) {\n            const maxHistoryString = await getString('maxhistory', 'block_ai_chat', maxHistory);\n            const warningErrorString = await getString('maxhistoryreached', 'block_ai_chat', maxHistory);\n            await alert(maxHistoryString, warningErrorString);\n            // Remember warning.\n            maxHistoryWarnings.add(conversation.id);\n        }\n        return shortenedMessages;\n    }\n    // Limit not reached, return messages.\n    return messages;\n};\n\n/**\n * Check if modal should close on outside click.\n * @param {*} event\n */\nconst checkOutsideClick = (event) => {\n    // View openfull acts like a normal modal.\n    if (viewmode != VIEW_OPENFULL) {\n        event.preventDefault();\n    }\n};\n\n/**\n * Set different viewmodes and save in local storage.\n * @param {string} mode\n */\nconst setView = async(mode = '') => {\n    const key = await hash('chatmode' + userid);\n    // Check for saved viewmode.\n    let savedmode = LocalStorage.get(key);\n    if (mode == '') {\n        if (!savedmode) {\n            // Set default.\n            mode = VIEW_CHATWINDOW;\n        } else {\n            mode = savedmode;\n        }\n    }\n    // Save viewmode and set global var.\n    LocalStorage.set(key, mode);\n    viewmode = mode;\n    console.log(mode);\n\n    // Set viewmode as bodyclass.\n    const body = document.querySelector('body');\n    body.classList.remove(VIEW_CHATWINDOW, VIEW_OPENFULL, VIEW_DOCKRIGHT);\n    body.classList.add(mode);\n};\n\n/**\n * Is user allowed new queries.\n * @returns {bool}\n */\nconst userAllowed = () => {\n    if (tenantConfig.tenantenabled === false || tenantConfig.userlocked === true) {\n        return false;\n    }\n\n    if (chatConfig.isconfigured === false ||\n        chatConfig.lockedforrole === false ||\n        chatConfig.limitreached === true ||\n        chatConfig.isconfigured === false\n    ) {\n        return false;\n    }\n    return true;\n};\n\n"],"names":["VIEW_CHATWINDOW","VIEW_OPENFULL","VIEW_DOCKRIGHT","strHistory","strNewDialog","strToday","strYesterday","badge","viewmode","modal","modalopen","conversation","id","messages","allConversations","userid","contextid","firstLoad","aiAtWork","maxHistory","maxHistoryWarnings","Set","tenantConfig","chatConfig","DialogModal","Modal","configure","modalConfig","show","removeOnClose","isVerticallyCentered","titletest","setTitletest","value","hide","document","querySelector","classList","remove","async","params","new","history","aiConfig","purposes","find","p","purpose","create","templateContext","title","getRoot","on","e","target","add","ModalEvents","outsideClick","event","checkOutsideClick","getConversations","setView","conversationcontextLimit","externalServices","getConversationcontextLimit","limit","getElementById","addEventListener","textarea","addTextareaListener","clickSubmitButton","showConversation","newDialog","deleteCurrentDialog","showHistory","helper","focustextarea","showModal","console","log","getAllConversations","error","x","at","length","clearMessages","setModalHeader","showMessages","enterQuestion","question","userAllowed","notice","message","showMessage","push","convHistory","checkMessageHistoryLengthLimit","options","idresult","getNewConversationId","forcenewitemid","itemid","requestresult","manager","askLocalAiManager","code","errorHandling","showReply","result","copy","copyToClipboard","saveConversationLocally","innerHTML","fields","querySelectorAll","field","marked","parse","text","forEach","val","sender","answer","templateData","html","js","Templates","renderForPromise","appendNodeContents","attachCopyListenerLast","scrollToBottom","deleted","undefined","deleteConversation","removeFromHistory","groupedByDate","convo","substring","now","Date","date","timecreated","today","getFullYear","getMonth","getDate","yesterday","twoWeeksAgo","setDate","weekday","day","month","monthOptions","year","dateString","toLocaleDateString","convItem","groups","Object","keys","map","key","objects","filter","obj","reply","hideinput","output","input","style","display","setTitle","modalheader","textareaOnKeydown","height","computedStyles","window","getComputedStyle","lineHeight","parseFloat","paddingTop","paddingBottom","borderTop","borderTopWidth","borderBottom","borderBottomWidth","maxHeight","newHeight","Math","min","scrollHeight","shiftKey","preventDefault","errorString","answerdivs","closest","shortenedMessages","slice","has","maxHistoryString","warningErrorString","mode","savedmode","LocalStorage","get","set","body","tenantenabled","userlocked","isconfigured","lockedforrole","limitreached"],"mappings":"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"}