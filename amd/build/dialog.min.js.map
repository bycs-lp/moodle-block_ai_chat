{"version":3,"file":"dialog.min.js","sources":["../src/dialog.js"],"sourcesContent":["import DialogModal from 'block_ai_interface/dialog_modal';\nimport * as externalServices from 'block_ai_interface/webservices';\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\nimport {makeRequest} from 'local_ai_manager/make_request';\n\n// Declare variables.\n// Modal.\nlet modal = {};\nlet modaltitle = '';\n\n// Current conversation.\nlet conversation = {\n    id: 0,\n    messages: [],\n};\n// All conversations.\nlet allConversations = [];\n// Userid.\nlet userid = 0;\n// Course context id.\nlet contextid = 0;\n// First load.\nlet firstLoad = true;\n\nexport const init = async(params) => {\n    userid = params.userid;\n    contextid = params.contextid;\n    modaltitle = params.title;\n\n    // Build modal.\n    modal = await DialogModal.create({\n        templateContext: {\n            title: modaltitle,\n            // history: history, // history dynamically added.\n        },\n    });\n\n    // Add class for styling when modal is displayed.\n    modal.getRoot().on('modal:shown', function(e) {\n        e.target.classList.add(\"ai_interface_modal\");\n        e.target.scrollTo(0, e.target.scrollHeight);\n    });\n\n    // Attach listener to the ai button to call modal.\n    let button = document.getElementById(\"ai_interface_button\");\n    button.addEventListener('mousedown', function() {\n        showModal(params);\n    });\n\n    // Load conversations.\n    getConversations();\n};\n\n/**\n * Show ai_interface modal.\n */\nasync function showModal() {\n\n    // Show modal.\n    modal.show();\n\n    // Add listener for input submission.\n    const textarea = document.getElementById('block_ai_interface-input-id');\n    addTextareaListener(textarea);\n\n    if (firstLoad) {\n        // Show conversation.\n        // Todo - firstload rewrite header, element is null.\n        showConversation();\n\n        // Add history to dropdownmenu.\n        addToHistory(allConversations);\n\n        // Add listeners for dropdownmenu.\n        const btnNewDialog = document.getElementById('block_ai_interface_new_dialog');\n        btnNewDialog.addEventListener('mousedown', () => {\n            newDialog();\n        });\n        firstLoad = false;\n    }\n\n    // Wait for the modal to show and set focus.\n    setTimeout(function() {\n        focustextarea();\n    }, 300);\n}\n\n/**\n * Send input to ai connector.\n * @param {*} question\n */\nconst enterQuestion = (question) => {\n\n    // Remove listener, so another question cant be triggered.\n    const textarea = document.getElementById('block_ai_interface-input-id');\n    textarea.removeEventListener('keydown', textareaOnKeydown);\n\n    // Add to conversation.\n    showMessage(question, 'self', false);\n\n    // Options, with conversation history.\n    const options = {\n        'component': 'block_ai_interface',\n        'contextid': contextid,\n        'messages': conversation,\n    };\n\n    // Send to local_ai_manager.\n    askLocalAiManager('chat', question, options).then(requestresult => {\n        if (requestresult.string == 'error') {\n            // Requestresult errorhandling.\n            return;\n        }\n\n        // Write back answer.\n        showReply(requestresult.result);\n\n        // Attach copy listener.\n        let copy = document.querySelector('.ai_interface_modal .awaitanswer .copy');\n        copyToClipboard(copy);\n\n        // Save new question and answer.\n        saveConversation(question, requestresult.result);\n\n        // Readd textarea listener.\n        addTextareaListener(textarea);\n\n        return;\n    }).catch((error) => displayException(error));\n};\n\n/**\n * Render reply.\n * @param {string} text\n */\nconst showReply = (text) => {\n    let field = document.querySelector('.ai_interface_modal .awaitanswer .text div');\n    field.replaceWith(text);\n};\n\n/**\n * Create new / Reset dialog.\n */\nconst newDialog = () => {\n    console.log(\"newDialog called\");\n    // Add current convo to history, if not already there.\n    if (allConversations.find(x => x.id === conversation.id) === 'undefined') {\n        addToHistory([conversation]);\n    }\n    conversation = {\n        id: 0,\n        messages: [],\n    };\n    clearMessages();\n    setModalHeader(true);\n};\n\n/**\n * Get the async answer from the local_ai_manager.\n *\n * @param {string} purpose\n * @param {string} prompt\n * @param {array} options\n * @returns {string}\n */\nconst askLocalAiManager = async(purpose, prompt, options = []) => {\n    let result = await makeRequest(purpose, prompt, JSON.stringify(options));\n    console.log(result);\n    return result;\n};\n\n/**\n * Show answer from local_ai_manager.\n * @param {*} text\n * @param {*} sender User or Ai\n * @param {*} answer Is answer in history\n */\nconst showMessage = (text, sender = '', answer = true) => {\n    // Imitate bool for message.mustache logic {{#sender}}.\n    if (sender === 'ai') {\n        sender = '';\n    }\n    const templateData = {\n        \"sender\": sender,\n        \"content\": text,\n        \"answer\": answer,\n    };\n    // Call the function to load and render our template.\n    Templates.renderForPromise('block_ai_interface/message', templateData)\n        // It returns a promise that needs to be resoved.\n        .then(({html, js}) => {\n        // Append results.\n        Templates.appendNodeContents('.block_ai_interface-output', html, js);\n            return true;\n        })\n        // Deal with this exception.\n        .catch(ex => displayException(ex));\n};\n\n/**\n * Show answer from local_ai_manager.\n * @param {*} e\n */\nconst logThis = (e) => {\nconsole.log(e);\n};\n\nconst showMessages = () => {\n    console.log(\"showMessages called\");\n    conversation.messages.forEach((val) => {\n        showMessage(val.message, val.sender);\n    });\n\n    // Scroll to bottom, when changing conversations.\n    const modaldiv = document.querySelector('.ai_interface_modal');\n    if (modaldiv !== null) {\n        setTimeout(() => {\n            modaldiv.scrollTo(0, modaldiv.scrollHeight);\n        }, 5);\n    }\n};\n\n/**\n * Clear output div.\n */\nconst clearMessages = () => {\n    console.log(\"clearMessages called\");\n    const output = document.querySelector('.block_ai_interface-output');\n    output.innerHTML = '';\n};\n\n/**\n * Webservice Get all conversations.\n */\nconst getConversations = async() => {\n    allConversations = await externalServices.getAllConversations(userid, contextid);\n};\n\n/**\n * Add conversations to history.\n * @param {*} convos Conversations\n */\nconst addToHistory = (convos) => {\n    convos.forEach((convo) => {\n\n        // Conditionally shorten menu title.\n        let title = convo.messages[0].message;\n        if (convo.messages[0].message.length > 50) {\n            title = convo.messages[0].message.substring(0, 50);\n            title += ' ...';\n        }\n\n        // Add entry in menu.\n        const templateData = {\n            \"title\": title,\n            \"conversationid\": convo.id,\n        };\n        Templates.renderForPromise('block_ai_interface/dropdownmenuitem', templateData)\n            // It returns a promise that needs to be resoved.\n            .then(({html, js}) => {\n                // Append results.\n                Templates.appendNodeContents('.block_ai_interface_action_menu .dropdown-menu', html, js);\n                return true;\n            })\n            // Deal with this exception.\n            .catch(ex => displayException(ex));\n    });\n};\n\n\n/**\n * Function to set conversation.\n * @param {*} id\n */\nconst showConversation = (id = 0) => {\n    // Change conversation or get last conversation.\n    if (id !== 0) {\n        conversation = allConversations.find(x => x.id === id)\n    } else if (typeof allConversations[0] !== 'undefined') {\n        conversation = allConversations.at(-1);\n    }\n    clearMessages();\n    showMessages();\n    setTimeout(() => {\n        setModalHeader();\n        attachCopyListener();\n    }, 235);\n};\n// Make globally accessible since it is used to show history in dropdownmenuitem.mustache.\ndocument.showConversation = showConversation;\n\n/**\n * Webservice Save conversation.\n * @param {*} question\n * @param {*} reply\n */\nconst saveConversation = async(question, reply) => {\n    await externalServices.saveInteraction(question, reply, conversation.id, userid, contextid);\n};\n\n/**\n * Set modal header title.\n * @param {*} empty\n */\nconst setModalHeader = (empty = false) => {\n    let modalheader = document.querySelector('.ai_interface_modal .modal-title div');\n    if (modalheader !== null) {\n        let title = '';\n        if (!empty) {\n            title = ' - ' + conversation.messages[0].message;\n            if (conversation.messages[0].message.length > 50) {\n                title = ' - ' + conversation.messages[0].message.substring(0, 50);\n                title += ' ...';\n            }\n        }\n        modalheader.innerHTML = modaltitle + title;\n    }\n};\n\n/**\n * Focus textarea, also wait till element is visible.\n */\nconst focustextarea = () => {\n    let elapsed = 0;\n    const interval = 25;\n    const timeout = 2000;\n\n    const checkInterval = setInterval(() => {\n        // Check if the textarea exists.\n        const textarea = document.getElementById('block_ai_interface-input-id');\n        // textarea is a bad check, test with transition to be completed.\n        if (textarea) {\n            clearInterval(checkInterval);\n            // To set focus multiple times, focus has to be reset.\n            const rand = document.getElementsByTagName('input');\n            rand[0].focus();\n            textarea.focus();\n        }\n\n        // Increment elapsed time.\n        elapsed += interval;\n\n        // Check if the timeout has been reached.\n        if (elapsed >= timeout) {\n            clearInterval(checkInterval);\n        }\n    }, interval);\n};\n\n/**\n * Attach event listener.\n * @param {*} textarea\n */\nconst addTextareaListener = (textarea) => {\n    textarea.addEventListener('keydown', textareaOnKeydown);\n};\n\n/**\n * Action for textarea submission.\n * @param {*} event\n */\nconst textareaOnKeydown = (event) => {\n    // TODO check for mobile devices.\n    if (event.key === 'Enter') {\n        enterQuestion(event.target.value);\n        event.preventDefault();\n        event.target.value = '';\n    }\n};\n\n/**\n * Attach copy listener to all elements.\n */\nconst attachCopyListener = () => {\n    const elements = document.querySelectorAll(\".ai_interface_modal .copy\");\n    elements.forEach((element) => {\n        element.addEventListener('mousedown', function() {\n            copyToClipboard(element);\n        });\n    });\n}\n\n/**\n * Copy ai reply to clipboard.\n * @param {*} element\n */\nconst copyToClipboard = (element) => {\n\n    // Find the adjacent text container.\n    const textElement = element.nextElementSibling;\n\n    // Get the text content.\n    const textToCopy = textElement.innerText || textElement.textContent;\n\n    // Copy to clipboard using the Clipboard API.\n    navigator.clipboard.writeText(textToCopy);\n};\n"],"names":["modal","modaltitle","conversation","id","messages","allConversations","userid","contextid","firstLoad","async","params","title","DialogModal","create","templateContext","getRoot","on","e","target","classList","add","scrollTo","scrollHeight","document","getElementById","addEventListener","show","textarea","addTextareaListener","showConversation","addToHistory","newDialog","setTimeout","focustextarea","showModal","getConversations","showReply","text","querySelector","replaceWith","console","log","find","x","clearMessages","setModalHeader","askLocalAiManager","purpose","prompt","options","result","JSON","stringify","showMessage","sender","answer","templateData","renderForPromise","then","_ref","html","js","appendNodeContents","catch","ex","showMessages","forEach","val","message","modaldiv","innerHTML","externalServices","getAllConversations","convos","convo","length","substring","_ref2","at","attachCopyListener","saveConversation","question","reply","saveInteraction","empty","modalheader","elapsed","checkInterval","setInterval","clearInterval","getElementsByTagName","focus","textareaOnKeydown","event","key","removeEventListener","requestresult","string","copy","copyToClipboard","error","enterQuestion","value","preventDefault","querySelectorAll","element","textElement","nextElementSibling","textToCopy","innerText","textContent","navigator","clipboard","writeText"],"mappings":"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"}